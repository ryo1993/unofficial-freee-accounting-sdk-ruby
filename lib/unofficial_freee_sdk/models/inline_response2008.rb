=begin
#freee API

# <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"_9\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_10\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"_11\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"_12\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"_13\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <hr /> <h2 id=\"_14\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module UnofficialFreeeSdk
  class InlineResponse2008
    attr_accessor :wallet_txns

    attr_accessor :deals

    attr_accessor :transfers

    attr_accessor :docs

    attr_accessor :doc_postings

    attr_accessor :receipts

    attr_accessor :receipt_stream_editor

    attr_accessor :expense_applications

    attr_accessor :spreadsheets

    attr_accessor :payment_requests

    attr_accessor :request_forms

    attr_accessor :approval_requests

    attr_accessor :reports

    attr_accessor :reports_income_expense

    attr_accessor :reports_receivables

    attr_accessor :reports_payables

    attr_accessor :reports_cash_balance

    attr_accessor :reports_crosstabs

    attr_accessor :reports_general_ledgers

    attr_accessor :reports_pl

    attr_accessor :reports_bs

    attr_accessor :reports_journals

    attr_accessor :reports_managements_planning

    attr_accessor :reports_managements_navigation

    attr_accessor :manual_journals

    attr_accessor :fixed_assets

    attr_accessor :inventory_refreshes

    attr_accessor :biz_allocations

    attr_accessor :payment_records

    attr_accessor :annual_reports

    attr_accessor :tax_reports

    attr_accessor :consumption_entries

    attr_accessor :tax_return

    attr_accessor :account_item_statements

    attr_accessor :month_end

    attr_accessor :year_end

    attr_accessor :walletables

    attr_accessor :companies

    attr_accessor :invitations

    attr_accessor :sign_in_logs

    attr_accessor :backups

    attr_accessor :opening_balances

    attr_accessor :system_conversion

    attr_accessor :resets

    attr_accessor :partners

    attr_accessor :items

    attr_accessor :sections

    attr_accessor :tags

    attr_accessor :account_items

    attr_accessor :taxes

    attr_accessor :user_matchers

    attr_accessor :deal_templates

    attr_accessor :manual_journal_templates

    attr_accessor :cost_allocations

    attr_accessor :approval_flow_routes

    attr_accessor :expense_application_templates

    attr_accessor :workflows

    attr_accessor :oauth_applications

    attr_accessor :oauth_authorizations

    attr_accessor :bank_accountant_staff_users

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'wallet_txns' => :'wallet_txns',
        :'deals' => :'deals',
        :'transfers' => :'transfers',
        :'docs' => :'docs',
        :'doc_postings' => :'doc_postings',
        :'receipts' => :'receipts',
        :'receipt_stream_editor' => :'receipt_stream_editor',
        :'expense_applications' => :'expense_applications',
        :'spreadsheets' => :'spreadsheets',
        :'payment_requests' => :'payment_requests',
        :'request_forms' => :'request_forms',
        :'approval_requests' => :'approval_requests',
        :'reports' => :'reports',
        :'reports_income_expense' => :'reports_income_expense',
        :'reports_receivables' => :'reports_receivables',
        :'reports_payables' => :'reports_payables',
        :'reports_cash_balance' => :'reports_cash_balance',
        :'reports_crosstabs' => :'reports_crosstabs',
        :'reports_general_ledgers' => :'reports_general_ledgers',
        :'reports_pl' => :'reports_pl',
        :'reports_bs' => :'reports_bs',
        :'reports_journals' => :'reports_journals',
        :'reports_managements_planning' => :'reports_managements_planning',
        :'reports_managements_navigation' => :'reports_managements_navigation',
        :'manual_journals' => :'manual_journals',
        :'fixed_assets' => :'fixed_assets',
        :'inventory_refreshes' => :'inventory_refreshes',
        :'biz_allocations' => :'biz_allocations',
        :'payment_records' => :'payment_records',
        :'annual_reports' => :'annual_reports',
        :'tax_reports' => :'tax_reports',
        :'consumption_entries' => :'consumption_entries',
        :'tax_return' => :'tax_return',
        :'account_item_statements' => :'account_item_statements',
        :'month_end' => :'month_end',
        :'year_end' => :'year_end',
        :'walletables' => :'walletables',
        :'companies' => :'companies',
        :'invitations' => :'invitations',
        :'sign_in_logs' => :'sign_in_logs',
        :'backups' => :'backups',
        :'opening_balances' => :'opening_balances',
        :'system_conversion' => :'system_conversion',
        :'resets' => :'resets',
        :'partners' => :'partners',
        :'items' => :'items',
        :'sections' => :'sections',
        :'tags' => :'tags',
        :'account_items' => :'account_items',
        :'taxes' => :'taxes',
        :'user_matchers' => :'user_matchers',
        :'deal_templates' => :'deal_templates',
        :'manual_journal_templates' => :'manual_journal_templates',
        :'cost_allocations' => :'cost_allocations',
        :'approval_flow_routes' => :'approval_flow_routes',
        :'expense_application_templates' => :'expense_application_templates',
        :'workflows' => :'workflows',
        :'oauth_applications' => :'oauth_applications',
        :'oauth_authorizations' => :'oauth_authorizations',
        :'bank_accountant_staff_users' => :'bank_accountant_staff_users'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'wallet_txns' => :'UserCapability',
        :'deals' => :'UserCapability',
        :'transfers' => :'UserCapability',
        :'docs' => :'UserCapability',
        :'doc_postings' => :'UserCapability',
        :'receipts' => :'UserCapability',
        :'receipt_stream_editor' => :'UserCapability',
        :'expense_applications' => :'UserCapability',
        :'spreadsheets' => :'UserCapability',
        :'payment_requests' => :'UserCapability',
        :'request_forms' => :'UserCapability',
        :'approval_requests' => :'UserCapability',
        :'reports' => :'UserCapability',
        :'reports_income_expense' => :'UserCapability',
        :'reports_receivables' => :'UserCapability',
        :'reports_payables' => :'UserCapability',
        :'reports_cash_balance' => :'UserCapability',
        :'reports_crosstabs' => :'UserCapability',
        :'reports_general_ledgers' => :'UserCapability',
        :'reports_pl' => :'UserCapability',
        :'reports_bs' => :'UserCapability',
        :'reports_journals' => :'UserCapability',
        :'reports_managements_planning' => :'UserCapability',
        :'reports_managements_navigation' => :'UserCapability',
        :'manual_journals' => :'UserCapability',
        :'fixed_assets' => :'UserCapability',
        :'inventory_refreshes' => :'UserCapability',
        :'biz_allocations' => :'UserCapability',
        :'payment_records' => :'UserCapability',
        :'annual_reports' => :'UserCapability',
        :'tax_reports' => :'UserCapability',
        :'consumption_entries' => :'UserCapability',
        :'tax_return' => :'UserCapability',
        :'account_item_statements' => :'UserCapability',
        :'month_end' => :'UserCapability',
        :'year_end' => :'UserCapability',
        :'walletables' => :'UserCapability',
        :'companies' => :'UserCapability',
        :'invitations' => :'UserCapability',
        :'sign_in_logs' => :'UserCapability',
        :'backups' => :'UserCapability',
        :'opening_balances' => :'UserCapability',
        :'system_conversion' => :'UserCapability',
        :'resets' => :'UserCapability',
        :'partners' => :'UserCapability',
        :'items' => :'UserCapability',
        :'sections' => :'UserCapability',
        :'tags' => :'UserCapability',
        :'account_items' => :'UserCapability',
        :'taxes' => :'UserCapability',
        :'user_matchers' => :'UserCapability',
        :'deal_templates' => :'UserCapability',
        :'manual_journal_templates' => :'UserCapability',
        :'cost_allocations' => :'UserCapability',
        :'approval_flow_routes' => :'UserCapability',
        :'expense_application_templates' => :'UserCapability',
        :'workflows' => :'UserCapability',
        :'oauth_applications' => :'UserCapability',
        :'oauth_authorizations' => :'UserCapability',
        :'bank_accountant_staff_users' => :'UserCapability'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnofficialFreeeSdk::InlineResponse2008` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnofficialFreeeSdk::InlineResponse2008`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'wallet_txns')
        self.wallet_txns = attributes[:'wallet_txns']
      end

      if attributes.key?(:'deals')
        self.deals = attributes[:'deals']
      end

      if attributes.key?(:'transfers')
        self.transfers = attributes[:'transfers']
      end

      if attributes.key?(:'docs')
        self.docs = attributes[:'docs']
      end

      if attributes.key?(:'doc_postings')
        self.doc_postings = attributes[:'doc_postings']
      end

      if attributes.key?(:'receipts')
        self.receipts = attributes[:'receipts']
      end

      if attributes.key?(:'receipt_stream_editor')
        self.receipt_stream_editor = attributes[:'receipt_stream_editor']
      end

      if attributes.key?(:'expense_applications')
        self.expense_applications = attributes[:'expense_applications']
      end

      if attributes.key?(:'spreadsheets')
        self.spreadsheets = attributes[:'spreadsheets']
      end

      if attributes.key?(:'payment_requests')
        self.payment_requests = attributes[:'payment_requests']
      end

      if attributes.key?(:'request_forms')
        self.request_forms = attributes[:'request_forms']
      end

      if attributes.key?(:'approval_requests')
        self.approval_requests = attributes[:'approval_requests']
      end

      if attributes.key?(:'reports')
        self.reports = attributes[:'reports']
      end

      if attributes.key?(:'reports_income_expense')
        self.reports_income_expense = attributes[:'reports_income_expense']
      end

      if attributes.key?(:'reports_receivables')
        self.reports_receivables = attributes[:'reports_receivables']
      end

      if attributes.key?(:'reports_payables')
        self.reports_payables = attributes[:'reports_payables']
      end

      if attributes.key?(:'reports_cash_balance')
        self.reports_cash_balance = attributes[:'reports_cash_balance']
      end

      if attributes.key?(:'reports_crosstabs')
        self.reports_crosstabs = attributes[:'reports_crosstabs']
      end

      if attributes.key?(:'reports_general_ledgers')
        self.reports_general_ledgers = attributes[:'reports_general_ledgers']
      end

      if attributes.key?(:'reports_pl')
        self.reports_pl = attributes[:'reports_pl']
      end

      if attributes.key?(:'reports_bs')
        self.reports_bs = attributes[:'reports_bs']
      end

      if attributes.key?(:'reports_journals')
        self.reports_journals = attributes[:'reports_journals']
      end

      if attributes.key?(:'reports_managements_planning')
        self.reports_managements_planning = attributes[:'reports_managements_planning']
      end

      if attributes.key?(:'reports_managements_navigation')
        self.reports_managements_navigation = attributes[:'reports_managements_navigation']
      end

      if attributes.key?(:'manual_journals')
        self.manual_journals = attributes[:'manual_journals']
      end

      if attributes.key?(:'fixed_assets')
        self.fixed_assets = attributes[:'fixed_assets']
      end

      if attributes.key?(:'inventory_refreshes')
        self.inventory_refreshes = attributes[:'inventory_refreshes']
      end

      if attributes.key?(:'biz_allocations')
        self.biz_allocations = attributes[:'biz_allocations']
      end

      if attributes.key?(:'payment_records')
        self.payment_records = attributes[:'payment_records']
      end

      if attributes.key?(:'annual_reports')
        self.annual_reports = attributes[:'annual_reports']
      end

      if attributes.key?(:'tax_reports')
        self.tax_reports = attributes[:'tax_reports']
      end

      if attributes.key?(:'consumption_entries')
        self.consumption_entries = attributes[:'consumption_entries']
      end

      if attributes.key?(:'tax_return')
        self.tax_return = attributes[:'tax_return']
      end

      if attributes.key?(:'account_item_statements')
        self.account_item_statements = attributes[:'account_item_statements']
      end

      if attributes.key?(:'month_end')
        self.month_end = attributes[:'month_end']
      end

      if attributes.key?(:'year_end')
        self.year_end = attributes[:'year_end']
      end

      if attributes.key?(:'walletables')
        self.walletables = attributes[:'walletables']
      end

      if attributes.key?(:'companies')
        self.companies = attributes[:'companies']
      end

      if attributes.key?(:'invitations')
        self.invitations = attributes[:'invitations']
      end

      if attributes.key?(:'sign_in_logs')
        self.sign_in_logs = attributes[:'sign_in_logs']
      end

      if attributes.key?(:'backups')
        self.backups = attributes[:'backups']
      end

      if attributes.key?(:'opening_balances')
        self.opening_balances = attributes[:'opening_balances']
      end

      if attributes.key?(:'system_conversion')
        self.system_conversion = attributes[:'system_conversion']
      end

      if attributes.key?(:'resets')
        self.resets = attributes[:'resets']
      end

      if attributes.key?(:'partners')
        self.partners = attributes[:'partners']
      end

      if attributes.key?(:'items')
        self.items = attributes[:'items']
      end

      if attributes.key?(:'sections')
        self.sections = attributes[:'sections']
      end

      if attributes.key?(:'tags')
        self.tags = attributes[:'tags']
      end

      if attributes.key?(:'account_items')
        self.account_items = attributes[:'account_items']
      end

      if attributes.key?(:'taxes')
        self.taxes = attributes[:'taxes']
      end

      if attributes.key?(:'user_matchers')
        self.user_matchers = attributes[:'user_matchers']
      end

      if attributes.key?(:'deal_templates')
        self.deal_templates = attributes[:'deal_templates']
      end

      if attributes.key?(:'manual_journal_templates')
        self.manual_journal_templates = attributes[:'manual_journal_templates']
      end

      if attributes.key?(:'cost_allocations')
        self.cost_allocations = attributes[:'cost_allocations']
      end

      if attributes.key?(:'approval_flow_routes')
        self.approval_flow_routes = attributes[:'approval_flow_routes']
      end

      if attributes.key?(:'expense_application_templates')
        self.expense_application_templates = attributes[:'expense_application_templates']
      end

      if attributes.key?(:'workflows')
        self.workflows = attributes[:'workflows']
      end

      if attributes.key?(:'oauth_applications')
        self.oauth_applications = attributes[:'oauth_applications']
      end

      if attributes.key?(:'oauth_authorizations')
        self.oauth_authorizations = attributes[:'oauth_authorizations']
      end

      if attributes.key?(:'bank_accountant_staff_users')
        self.bank_accountant_staff_users = attributes[:'bank_accountant_staff_users']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @wallet_txns.nil?
        invalid_properties.push('invalid value for "wallet_txns", wallet_txns cannot be nil.')
      end

      if @deals.nil?
        invalid_properties.push('invalid value for "deals", deals cannot be nil.')
      end

      if @transfers.nil?
        invalid_properties.push('invalid value for "transfers", transfers cannot be nil.')
      end

      if @docs.nil?
        invalid_properties.push('invalid value for "docs", docs cannot be nil.')
      end

      if @doc_postings.nil?
        invalid_properties.push('invalid value for "doc_postings", doc_postings cannot be nil.')
      end

      if @receipts.nil?
        invalid_properties.push('invalid value for "receipts", receipts cannot be nil.')
      end

      if @receipt_stream_editor.nil?
        invalid_properties.push('invalid value for "receipt_stream_editor", receipt_stream_editor cannot be nil.')
      end

      if @expense_applications.nil?
        invalid_properties.push('invalid value for "expense_applications", expense_applications cannot be nil.')
      end

      if @spreadsheets.nil?
        invalid_properties.push('invalid value for "spreadsheets", spreadsheets cannot be nil.')
      end

      if @payment_requests.nil?
        invalid_properties.push('invalid value for "payment_requests", payment_requests cannot be nil.')
      end

      if @request_forms.nil?
        invalid_properties.push('invalid value for "request_forms", request_forms cannot be nil.')
      end

      if @approval_requests.nil?
        invalid_properties.push('invalid value for "approval_requests", approval_requests cannot be nil.')
      end

      if @reports.nil?
        invalid_properties.push('invalid value for "reports", reports cannot be nil.')
      end

      if @reports_income_expense.nil?
        invalid_properties.push('invalid value for "reports_income_expense", reports_income_expense cannot be nil.')
      end

      if @reports_receivables.nil?
        invalid_properties.push('invalid value for "reports_receivables", reports_receivables cannot be nil.')
      end

      if @reports_payables.nil?
        invalid_properties.push('invalid value for "reports_payables", reports_payables cannot be nil.')
      end

      if @reports_cash_balance.nil?
        invalid_properties.push('invalid value for "reports_cash_balance", reports_cash_balance cannot be nil.')
      end

      if @reports_crosstabs.nil?
        invalid_properties.push('invalid value for "reports_crosstabs", reports_crosstabs cannot be nil.')
      end

      if @reports_general_ledgers.nil?
        invalid_properties.push('invalid value for "reports_general_ledgers", reports_general_ledgers cannot be nil.')
      end

      if @reports_pl.nil?
        invalid_properties.push('invalid value for "reports_pl", reports_pl cannot be nil.')
      end

      if @reports_bs.nil?
        invalid_properties.push('invalid value for "reports_bs", reports_bs cannot be nil.')
      end

      if @reports_journals.nil?
        invalid_properties.push('invalid value for "reports_journals", reports_journals cannot be nil.')
      end

      if @reports_managements_planning.nil?
        invalid_properties.push('invalid value for "reports_managements_planning", reports_managements_planning cannot be nil.')
      end

      if @reports_managements_navigation.nil?
        invalid_properties.push('invalid value for "reports_managements_navigation", reports_managements_navigation cannot be nil.')
      end

      if @manual_journals.nil?
        invalid_properties.push('invalid value for "manual_journals", manual_journals cannot be nil.')
      end

      if @fixed_assets.nil?
        invalid_properties.push('invalid value for "fixed_assets", fixed_assets cannot be nil.')
      end

      if @inventory_refreshes.nil?
        invalid_properties.push('invalid value for "inventory_refreshes", inventory_refreshes cannot be nil.')
      end

      if @biz_allocations.nil?
        invalid_properties.push('invalid value for "biz_allocations", biz_allocations cannot be nil.')
      end

      if @payment_records.nil?
        invalid_properties.push('invalid value for "payment_records", payment_records cannot be nil.')
      end

      if @annual_reports.nil?
        invalid_properties.push('invalid value for "annual_reports", annual_reports cannot be nil.')
      end

      if @tax_reports.nil?
        invalid_properties.push('invalid value for "tax_reports", tax_reports cannot be nil.')
      end

      if @consumption_entries.nil?
        invalid_properties.push('invalid value for "consumption_entries", consumption_entries cannot be nil.')
      end

      if @tax_return.nil?
        invalid_properties.push('invalid value for "tax_return", tax_return cannot be nil.')
      end

      if @account_item_statements.nil?
        invalid_properties.push('invalid value for "account_item_statements", account_item_statements cannot be nil.')
      end

      if @month_end.nil?
        invalid_properties.push('invalid value for "month_end", month_end cannot be nil.')
      end

      if @year_end.nil?
        invalid_properties.push('invalid value for "year_end", year_end cannot be nil.')
      end

      if @walletables.nil?
        invalid_properties.push('invalid value for "walletables", walletables cannot be nil.')
      end

      if @companies.nil?
        invalid_properties.push('invalid value for "companies", companies cannot be nil.')
      end

      if @invitations.nil?
        invalid_properties.push('invalid value for "invitations", invitations cannot be nil.')
      end

      if @sign_in_logs.nil?
        invalid_properties.push('invalid value for "sign_in_logs", sign_in_logs cannot be nil.')
      end

      if @backups.nil?
        invalid_properties.push('invalid value for "backups", backups cannot be nil.')
      end

      if @opening_balances.nil?
        invalid_properties.push('invalid value for "opening_balances", opening_balances cannot be nil.')
      end

      if @system_conversion.nil?
        invalid_properties.push('invalid value for "system_conversion", system_conversion cannot be nil.')
      end

      if @resets.nil?
        invalid_properties.push('invalid value for "resets", resets cannot be nil.')
      end

      if @partners.nil?
        invalid_properties.push('invalid value for "partners", partners cannot be nil.')
      end

      if @items.nil?
        invalid_properties.push('invalid value for "items", items cannot be nil.')
      end

      if @sections.nil?
        invalid_properties.push('invalid value for "sections", sections cannot be nil.')
      end

      if @tags.nil?
        invalid_properties.push('invalid value for "tags", tags cannot be nil.')
      end

      if @account_items.nil?
        invalid_properties.push('invalid value for "account_items", account_items cannot be nil.')
      end

      if @taxes.nil?
        invalid_properties.push('invalid value for "taxes", taxes cannot be nil.')
      end

      if @user_matchers.nil?
        invalid_properties.push('invalid value for "user_matchers", user_matchers cannot be nil.')
      end

      if @deal_templates.nil?
        invalid_properties.push('invalid value for "deal_templates", deal_templates cannot be nil.')
      end

      if @manual_journal_templates.nil?
        invalid_properties.push('invalid value for "manual_journal_templates", manual_journal_templates cannot be nil.')
      end

      if @cost_allocations.nil?
        invalid_properties.push('invalid value for "cost_allocations", cost_allocations cannot be nil.')
      end

      if @approval_flow_routes.nil?
        invalid_properties.push('invalid value for "approval_flow_routes", approval_flow_routes cannot be nil.')
      end

      if @expense_application_templates.nil?
        invalid_properties.push('invalid value for "expense_application_templates", expense_application_templates cannot be nil.')
      end

      if @workflows.nil?
        invalid_properties.push('invalid value for "workflows", workflows cannot be nil.')
      end

      if @oauth_applications.nil?
        invalid_properties.push('invalid value for "oauth_applications", oauth_applications cannot be nil.')
      end

      if @oauth_authorizations.nil?
        invalid_properties.push('invalid value for "oauth_authorizations", oauth_authorizations cannot be nil.')
      end

      if @bank_accountant_staff_users.nil?
        invalid_properties.push('invalid value for "bank_accountant_staff_users", bank_accountant_staff_users cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @wallet_txns.nil?
      return false if @deals.nil?
      return false if @transfers.nil?
      return false if @docs.nil?
      return false if @doc_postings.nil?
      return false if @receipts.nil?
      return false if @receipt_stream_editor.nil?
      return false if @expense_applications.nil?
      return false if @spreadsheets.nil?
      return false if @payment_requests.nil?
      return false if @request_forms.nil?
      return false if @approval_requests.nil?
      return false if @reports.nil?
      return false if @reports_income_expense.nil?
      return false if @reports_receivables.nil?
      return false if @reports_payables.nil?
      return false if @reports_cash_balance.nil?
      return false if @reports_crosstabs.nil?
      return false if @reports_general_ledgers.nil?
      return false if @reports_pl.nil?
      return false if @reports_bs.nil?
      return false if @reports_journals.nil?
      return false if @reports_managements_planning.nil?
      return false if @reports_managements_navigation.nil?
      return false if @manual_journals.nil?
      return false if @fixed_assets.nil?
      return false if @inventory_refreshes.nil?
      return false if @biz_allocations.nil?
      return false if @payment_records.nil?
      return false if @annual_reports.nil?
      return false if @tax_reports.nil?
      return false if @consumption_entries.nil?
      return false if @tax_return.nil?
      return false if @account_item_statements.nil?
      return false if @month_end.nil?
      return false if @year_end.nil?
      return false if @walletables.nil?
      return false if @companies.nil?
      return false if @invitations.nil?
      return false if @sign_in_logs.nil?
      return false if @backups.nil?
      return false if @opening_balances.nil?
      return false if @system_conversion.nil?
      return false if @resets.nil?
      return false if @partners.nil?
      return false if @items.nil?
      return false if @sections.nil?
      return false if @tags.nil?
      return false if @account_items.nil?
      return false if @taxes.nil?
      return false if @user_matchers.nil?
      return false if @deal_templates.nil?
      return false if @manual_journal_templates.nil?
      return false if @cost_allocations.nil?
      return false if @approval_flow_routes.nil?
      return false if @expense_application_templates.nil?
      return false if @workflows.nil?
      return false if @oauth_applications.nil?
      return false if @oauth_authorizations.nil?
      return false if @bank_accountant_staff_users.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          wallet_txns == o.wallet_txns &&
          deals == o.deals &&
          transfers == o.transfers &&
          docs == o.docs &&
          doc_postings == o.doc_postings &&
          receipts == o.receipts &&
          receipt_stream_editor == o.receipt_stream_editor &&
          expense_applications == o.expense_applications &&
          spreadsheets == o.spreadsheets &&
          payment_requests == o.payment_requests &&
          request_forms == o.request_forms &&
          approval_requests == o.approval_requests &&
          reports == o.reports &&
          reports_income_expense == o.reports_income_expense &&
          reports_receivables == o.reports_receivables &&
          reports_payables == o.reports_payables &&
          reports_cash_balance == o.reports_cash_balance &&
          reports_crosstabs == o.reports_crosstabs &&
          reports_general_ledgers == o.reports_general_ledgers &&
          reports_pl == o.reports_pl &&
          reports_bs == o.reports_bs &&
          reports_journals == o.reports_journals &&
          reports_managements_planning == o.reports_managements_planning &&
          reports_managements_navigation == o.reports_managements_navigation &&
          manual_journals == o.manual_journals &&
          fixed_assets == o.fixed_assets &&
          inventory_refreshes == o.inventory_refreshes &&
          biz_allocations == o.biz_allocations &&
          payment_records == o.payment_records &&
          annual_reports == o.annual_reports &&
          tax_reports == o.tax_reports &&
          consumption_entries == o.consumption_entries &&
          tax_return == o.tax_return &&
          account_item_statements == o.account_item_statements &&
          month_end == o.month_end &&
          year_end == o.year_end &&
          walletables == o.walletables &&
          companies == o.companies &&
          invitations == o.invitations &&
          sign_in_logs == o.sign_in_logs &&
          backups == o.backups &&
          opening_balances == o.opening_balances &&
          system_conversion == o.system_conversion &&
          resets == o.resets &&
          partners == o.partners &&
          items == o.items &&
          sections == o.sections &&
          tags == o.tags &&
          account_items == o.account_items &&
          taxes == o.taxes &&
          user_matchers == o.user_matchers &&
          deal_templates == o.deal_templates &&
          manual_journal_templates == o.manual_journal_templates &&
          cost_allocations == o.cost_allocations &&
          approval_flow_routes == o.approval_flow_routes &&
          expense_application_templates == o.expense_application_templates &&
          workflows == o.workflows &&
          oauth_applications == o.oauth_applications &&
          oauth_authorizations == o.oauth_authorizations &&
          bank_accountant_staff_users == o.bank_accountant_staff_users
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [wallet_txns, deals, transfers, docs, doc_postings, receipts, receipt_stream_editor, expense_applications, spreadsheets, payment_requests, request_forms, approval_requests, reports, reports_income_expense, reports_receivables, reports_payables, reports_cash_balance, reports_crosstabs, reports_general_ledgers, reports_pl, reports_bs, reports_journals, reports_managements_planning, reports_managements_navigation, manual_journals, fixed_assets, inventory_refreshes, biz_allocations, payment_records, annual_reports, tax_reports, consumption_entries, tax_return, account_item_statements, month_end, year_end, walletables, companies, invitations, sign_in_logs, backups, opening_balances, system_conversion, resets, partners, items, sections, tags, account_items, taxes, user_matchers, deal_templates, manual_journal_templates, cost_allocations, approval_flow_routes, expense_application_templates, workflows, oauth_applications, oauth_authorizations, bank_accountant_staff_users].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        UnofficialFreeeSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
