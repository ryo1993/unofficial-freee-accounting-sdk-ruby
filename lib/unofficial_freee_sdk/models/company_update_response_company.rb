=begin
#freee API

# <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"_9\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_10\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"_11\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"_12\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"_13\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <hr /> <h2 id=\"_14\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module UnofficialFreeeSdk
  class CompanyUpdateResponseCompany
    # 事業所ID
    attr_accessor :id

    # 事業所の正式名称 (100文字以内)
    attr_accessor :name

    # 正式名称フリガナ (100文字以内)
    attr_accessor :name_kana

    # 事業所名
    attr_accessor :display_name

    # 源泉徴収税計算（0: 消費税を含める、1: 消費税を含めない）
    attr_accessor :tax_at_source_calc_type

    # 担当者名 (50文字以内)
    attr_accessor :contact_name

    # 従業員数（0: 経営者のみ、1: 2~5人、2: 6~10人、3: 11~20人、4: 21~30人、5: 31~40人、6: 41~100人、7: 100人以上
    attr_accessor :head_count

    # 法人番号 (半角数字13桁、法人のみ)
    attr_accessor :corporate_number

    # 仕訳番号形式（not_used: 使用しない、digits: 数字（例：5091824）、alnum: 英数字（例：59J0P））
    attr_accessor :txn_number_format

    # 決済口座のデフォルト
    attr_accessor :default_wallet_account_id

    # プライベート資金/役員資金（false: 使用しない、true: 使用する）
    attr_accessor :private_settlement

    # マイナスの表示方法（0: -、 1: △）
    attr_accessor :minus_format

    # ユーザーの権限
    attr_accessor :role

    # 電話番号１
    attr_accessor :phone1

    # 電話番号２
    attr_accessor :phone2

    # FAX
    attr_accessor :fax

    # 郵便番号
    attr_accessor :zipcode

    # 都道府県コード（0: 北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
    attr_accessor :prefecture_code

    # 市区町村・番地
    attr_accessor :street_name1

    # 建物名・部屋番号など
    attr_accessor :street_name2

    # レイアウト(0: レイアウト1, 1:レイアウト2, 3:封筒1, 4:レイアウト3(繰越金額欄あり), 5: 封筒2(繰越金額欄あり))
    attr_accessor :invoice_layout

    # スタイル(0: クラシック, 1: モダン)
    attr_accessor :invoice_style

    # 金額端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
    attr_accessor :amount_fraction

    # 種別（agriculture_forestry_fisheries_ore: 農林水産業/鉱業、construction: 建設、manufacturing_processing: 製造/加工、it: IT、transportation_logistics: 運輸/物流、retail_wholesale: 小売/卸売、finance_insurance: 金融/保険、real_estate_rental: 不動産/レンタル、profession: 士業/学術/専門技術サービス、design_production: デザイン/制作、food: 飲食、leisure_entertainment: レジャー/娯楽、lifestyle: 生活関連サービス、education: 教育/学習支援、medical_welfare: 医療/福祉、other_services: その他サービス、other: その他）
    attr_accessor :industry_class

    # コード（transport_delivery: 輸送業/配送業、delivery: バイク便等の配達業、other_transportation_logistics: その他の運輸業、物流業）
    attr_accessor :industry_code

    # 仕訳承認フロー（enable: 有効、 disable: 無効）
    attr_accessor :workflow_setting

    attr_accessor :fiscal_years

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'name_kana' => :'name_kana',
        :'display_name' => :'display_name',
        :'tax_at_source_calc_type' => :'tax_at_source_calc_type',
        :'contact_name' => :'contact_name',
        :'head_count' => :'head_count',
        :'corporate_number' => :'corporate_number',
        :'txn_number_format' => :'txn_number_format',
        :'default_wallet_account_id' => :'default_wallet_account_id',
        :'private_settlement' => :'private_settlement',
        :'minus_format' => :'minus_format',
        :'role' => :'role',
        :'phone1' => :'phone1',
        :'phone2' => :'phone2',
        :'fax' => :'fax',
        :'zipcode' => :'zipcode',
        :'prefecture_code' => :'prefecture_code',
        :'street_name1' => :'street_name1',
        :'street_name2' => :'street_name2',
        :'invoice_layout' => :'invoice_layout',
        :'invoice_style' => :'invoice_style',
        :'amount_fraction' => :'amount_fraction',
        :'industry_class' => :'industry_class',
        :'industry_code' => :'industry_code',
        :'workflow_setting' => :'workflow_setting',
        :'fiscal_years' => :'fiscal_years'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'name_kana' => :'String',
        :'display_name' => :'String',
        :'tax_at_source_calc_type' => :'Integer',
        :'contact_name' => :'String',
        :'head_count' => :'Integer',
        :'corporate_number' => :'String',
        :'txn_number_format' => :'String',
        :'default_wallet_account_id' => :'Integer',
        :'private_settlement' => :'Boolean',
        :'minus_format' => :'Integer',
        :'role' => :'String',
        :'phone1' => :'String',
        :'phone2' => :'String',
        :'fax' => :'String',
        :'zipcode' => :'String',
        :'prefecture_code' => :'Integer',
        :'street_name1' => :'String',
        :'street_name2' => :'String',
        :'invoice_layout' => :'Integer',
        :'invoice_style' => :'Integer',
        :'amount_fraction' => :'Integer',
        :'industry_class' => :'String',
        :'industry_code' => :'String',
        :'workflow_setting' => :'String',
        :'fiscal_years' => :'Array<CompanyUpdateResponseCompanyFiscalYears>'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'name',
        :'name_kana',
        :'contact_name',
        :'head_count',
        :'phone2',
        :'fax',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnofficialFreeeSdk::CompanyUpdateResponseCompany` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnofficialFreeeSdk::CompanyUpdateResponseCompany`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'name_kana')
        self.name_kana = attributes[:'name_kana']
      end

      if attributes.key?(:'display_name')
        self.display_name = attributes[:'display_name']
      end

      if attributes.key?(:'tax_at_source_calc_type')
        self.tax_at_source_calc_type = attributes[:'tax_at_source_calc_type']
      end

      if attributes.key?(:'contact_name')
        self.contact_name = attributes[:'contact_name']
      end

      if attributes.key?(:'head_count')
        self.head_count = attributes[:'head_count']
      end

      if attributes.key?(:'corporate_number')
        self.corporate_number = attributes[:'corporate_number']
      end

      if attributes.key?(:'txn_number_format')
        self.txn_number_format = attributes[:'txn_number_format']
      end

      if attributes.key?(:'default_wallet_account_id')
        self.default_wallet_account_id = attributes[:'default_wallet_account_id']
      end

      if attributes.key?(:'private_settlement')
        self.private_settlement = attributes[:'private_settlement']
      end

      if attributes.key?(:'minus_format')
        self.minus_format = attributes[:'minus_format']
      end

      if attributes.key?(:'role')
        self.role = attributes[:'role']
      end

      if attributes.key?(:'phone1')
        self.phone1 = attributes[:'phone1']
      end

      if attributes.key?(:'phone2')
        self.phone2 = attributes[:'phone2']
      end

      if attributes.key?(:'fax')
        self.fax = attributes[:'fax']
      end

      if attributes.key?(:'zipcode')
        self.zipcode = attributes[:'zipcode']
      end

      if attributes.key?(:'prefecture_code')
        self.prefecture_code = attributes[:'prefecture_code']
      end

      if attributes.key?(:'street_name1')
        self.street_name1 = attributes[:'street_name1']
      end

      if attributes.key?(:'street_name2')
        self.street_name2 = attributes[:'street_name2']
      end

      if attributes.key?(:'invoice_layout')
        self.invoice_layout = attributes[:'invoice_layout']
      end

      if attributes.key?(:'invoice_style')
        self.invoice_style = attributes[:'invoice_style']
      end

      if attributes.key?(:'amount_fraction')
        self.amount_fraction = attributes[:'amount_fraction']
      end

      if attributes.key?(:'industry_class')
        self.industry_class = attributes[:'industry_class']
      end

      if attributes.key?(:'industry_code')
        self.industry_code = attributes[:'industry_code']
      end

      if attributes.key?(:'workflow_setting')
        self.workflow_setting = attributes[:'workflow_setting']
      end

      if attributes.key?(:'fiscal_years')
        if (value = attributes[:'fiscal_years']).is_a?(Array)
          self.fiscal_years = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id > 999999999999
        invalid_properties.push('invalid value for "id", must be smaller than or equal to 999999999999.')
      end

      if @id < 1
        invalid_properties.push('invalid value for "id", must be greater than or equal to 1.')
      end

      if @name.to_s.length > 100
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 100.')
      end

      if @name_kana.to_s.length > 100
        invalid_properties.push('invalid value for "name_kana", the character length must be smaller than or equal to 100.')
      end

      if @display_name.nil?
        invalid_properties.push('invalid value for "display_name", display_name cannot be nil.')
      end

      if @tax_at_source_calc_type.nil?
        invalid_properties.push('invalid value for "tax_at_source_calc_type", tax_at_source_calc_type cannot be nil.')
      end

      if @tax_at_source_calc_type > 1
        invalid_properties.push('invalid value for "tax_at_source_calc_type", must be smaller than or equal to 1.')
      end

      if @tax_at_source_calc_type < 0
        invalid_properties.push('invalid value for "tax_at_source_calc_type", must be greater than or equal to 0.')
      end

      if @contact_name.to_s.length > 50
        invalid_properties.push('invalid value for "contact_name", the character length must be smaller than or equal to 50.')
      end

      if @head_count > 7
        invalid_properties.push('invalid value for "head_count", must be smaller than or equal to 7.')
      end

      if @head_count < 0
        invalid_properties.push('invalid value for "head_count", must be greater than or equal to 0.')
      end

      if @corporate_number.nil?
        invalid_properties.push('invalid value for "corporate_number", corporate_number cannot be nil.')
      end

      if @txn_number_format.nil?
        invalid_properties.push('invalid value for "txn_number_format", txn_number_format cannot be nil.')
      end

      if !@default_wallet_account_id.nil? && @default_wallet_account_id > 999999999999
        invalid_properties.push('invalid value for "default_wallet_account_id", must be smaller than or equal to 999999999999.')
      end

      if !@default_wallet_account_id.nil? && @default_wallet_account_id < 1
        invalid_properties.push('invalid value for "default_wallet_account_id", must be greater than or equal to 1.')
      end

      if @private_settlement.nil?
        invalid_properties.push('invalid value for "private_settlement", private_settlement cannot be nil.')
      end

      if @minus_format.nil?
        invalid_properties.push('invalid value for "minus_format", minus_format cannot be nil.')
      end

      if @minus_format > 1
        invalid_properties.push('invalid value for "minus_format", must be smaller than or equal to 1.')
      end

      if @minus_format < 0
        invalid_properties.push('invalid value for "minus_format", must be greater than or equal to 0.')
      end

      if @role.nil?
        invalid_properties.push('invalid value for "role", role cannot be nil.')
      end

      if @phone1.nil?
        invalid_properties.push('invalid value for "phone1", phone1 cannot be nil.')
      end

      if @zipcode.nil?
        invalid_properties.push('invalid value for "zipcode", zipcode cannot be nil.')
      end

      if @prefecture_code.nil?
        invalid_properties.push('invalid value for "prefecture_code", prefecture_code cannot be nil.')
      end

      if @prefecture_code > 46
        invalid_properties.push('invalid value for "prefecture_code", must be smaller than or equal to 46.')
      end

      if @prefecture_code < 0
        invalid_properties.push('invalid value for "prefecture_code", must be greater than or equal to 0.')
      end

      if @street_name1.nil?
        invalid_properties.push('invalid value for "street_name1", street_name1 cannot be nil.')
      end

      if @street_name2.nil?
        invalid_properties.push('invalid value for "street_name2", street_name2 cannot be nil.')
      end

      if @invoice_layout.nil?
        invalid_properties.push('invalid value for "invoice_layout", invoice_layout cannot be nil.')
      end

      if @invoice_layout > 5
        invalid_properties.push('invalid value for "invoice_layout", must be smaller than or equal to 5.')
      end

      if @invoice_layout < 0
        invalid_properties.push('invalid value for "invoice_layout", must be greater than or equal to 0.')
      end

      if @invoice_style.nil?
        invalid_properties.push('invalid value for "invoice_style", invoice_style cannot be nil.')
      end

      if @invoice_style > 1
        invalid_properties.push('invalid value for "invoice_style", must be smaller than or equal to 1.')
      end

      if @invoice_style < 0
        invalid_properties.push('invalid value for "invoice_style", must be greater than or equal to 0.')
      end

      if @amount_fraction.nil?
        invalid_properties.push('invalid value for "amount_fraction", amount_fraction cannot be nil.')
      end

      if @amount_fraction > 2
        invalid_properties.push('invalid value for "amount_fraction", must be smaller than or equal to 2.')
      end

      if @amount_fraction < 0
        invalid_properties.push('invalid value for "amount_fraction", must be greater than or equal to 0.')
      end

      if @industry_class.nil?
        invalid_properties.push('invalid value for "industry_class", industry_class cannot be nil.')
      end

      if @industry_code.nil?
        invalid_properties.push('invalid value for "industry_code", industry_code cannot be nil.')
      end

      if @workflow_setting.nil?
        invalid_properties.push('invalid value for "workflow_setting", workflow_setting cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id > 999999999999
      return false if @id < 1
      return false if @name.to_s.length > 100
      return false if @name_kana.to_s.length > 100
      return false if @display_name.nil?
      return false if @tax_at_source_calc_type.nil?
      return false if @tax_at_source_calc_type > 1
      return false if @tax_at_source_calc_type < 0
      return false if @contact_name.to_s.length > 50
      return false if @head_count > 7
      return false if @head_count < 0
      return false if @corporate_number.nil?
      return false if @txn_number_format.nil?
      txn_number_format_validator = EnumAttributeValidator.new('String', ["not_used", "digits", "alnum"])
      return false unless txn_number_format_validator.valid?(@txn_number_format)
      return false if !@default_wallet_account_id.nil? && @default_wallet_account_id > 999999999999
      return false if !@default_wallet_account_id.nil? && @default_wallet_account_id < 1
      return false if @private_settlement.nil?
      return false if @minus_format.nil?
      return false if @minus_format > 1
      return false if @minus_format < 0
      return false if @role.nil?
      role_validator = EnumAttributeValidator.new('String', ["admin", "simple_accounting", "self_only", "read_only"])
      return false unless role_validator.valid?(@role)
      return false if @phone1.nil?
      return false if @zipcode.nil?
      return false if @prefecture_code.nil?
      return false if @prefecture_code > 46
      return false if @prefecture_code < 0
      return false if @street_name1.nil?
      return false if @street_name2.nil?
      return false if @invoice_layout.nil?
      return false if @invoice_layout > 5
      return false if @invoice_layout < 0
      return false if @invoice_style.nil?
      return false if @invoice_style > 1
      return false if @invoice_style < 0
      return false if @amount_fraction.nil?
      return false if @amount_fraction > 2
      return false if @amount_fraction < 0
      return false if @industry_class.nil?
      industry_class_validator = EnumAttributeValidator.new('String', ["", "agriculture_forestry_fisheries_ore", "construction", "manufacturing_processing", "it", "transportation_logistics", "retail_wholesale", "finance_insurance", "real_estate_rental", "profession", "design_production", "food", "lifestyle", "education", "medical_welfare", "other_services", "other"])
      return false unless industry_class_validator.valid?(@industry_class)
      return false if @industry_code.nil?
      industry_code_validator = EnumAttributeValidator.new('String', ["", "transport_delivery", "delivery", "other_transportation_logistics"])
      return false unless industry_code_validator.valid?(@industry_code)
      return false if @workflow_setting.nil?
      workflow_setting_validator = EnumAttributeValidator.new('String', ["enable", "disable"])
      return false unless workflow_setting_validator.valid?(@workflow_setting)
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id > 999999999999
        fail ArgumentError, 'invalid value for "id", must be smaller than or equal to 999999999999.'
      end

      if id < 1
        fail ArgumentError, 'invalid value for "id", must be greater than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.to_s.length > 100
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 100.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] name_kana Value to be assigned
    def name_kana=(name_kana)
      if name_kana.to_s.length > 100
        fail ArgumentError, 'invalid value for "name_kana", the character length must be smaller than or equal to 100.'
      end

      @name_kana = name_kana
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_at_source_calc_type Value to be assigned
    def tax_at_source_calc_type=(tax_at_source_calc_type)
      if tax_at_source_calc_type.nil?
        fail ArgumentError, 'tax_at_source_calc_type cannot be nil'
      end

      if tax_at_source_calc_type > 1
        fail ArgumentError, 'invalid value for "tax_at_source_calc_type", must be smaller than or equal to 1.'
      end

      if tax_at_source_calc_type < 0
        fail ArgumentError, 'invalid value for "tax_at_source_calc_type", must be greater than or equal to 0.'
      end

      @tax_at_source_calc_type = tax_at_source_calc_type
    end

    # Custom attribute writer method with validation
    # @param [Object] contact_name Value to be assigned
    def contact_name=(contact_name)
      if contact_name.to_s.length > 50
        fail ArgumentError, 'invalid value for "contact_name", the character length must be smaller than or equal to 50.'
      end

      @contact_name = contact_name
    end

    # Custom attribute writer method with validation
    # @param [Object] head_count Value to be assigned
    def head_count=(head_count)
      if head_count > 7
        fail ArgumentError, 'invalid value for "head_count", must be smaller than or equal to 7.'
      end

      if head_count < 0
        fail ArgumentError, 'invalid value for "head_count", must be greater than or equal to 0.'
      end

      @head_count = head_count
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] txn_number_format Object to be assigned
    def txn_number_format=(txn_number_format)
      validator = EnumAttributeValidator.new('String', ["not_used", "digits", "alnum"])
      unless validator.valid?(txn_number_format)
        fail ArgumentError, "invalid value for \"txn_number_format\", must be one of #{validator.allowable_values}."
      end
      @txn_number_format = txn_number_format
    end

    # Custom attribute writer method with validation
    # @param [Object] default_wallet_account_id Value to be assigned
    def default_wallet_account_id=(default_wallet_account_id)
      if !default_wallet_account_id.nil? && default_wallet_account_id > 999999999999
        fail ArgumentError, 'invalid value for "default_wallet_account_id", must be smaller than or equal to 999999999999.'
      end

      if !default_wallet_account_id.nil? && default_wallet_account_id < 1
        fail ArgumentError, 'invalid value for "default_wallet_account_id", must be greater than or equal to 1.'
      end

      @default_wallet_account_id = default_wallet_account_id
    end

    # Custom attribute writer method with validation
    # @param [Object] minus_format Value to be assigned
    def minus_format=(minus_format)
      if minus_format.nil?
        fail ArgumentError, 'minus_format cannot be nil'
      end

      if minus_format > 1
        fail ArgumentError, 'invalid value for "minus_format", must be smaller than or equal to 1.'
      end

      if minus_format < 0
        fail ArgumentError, 'invalid value for "minus_format", must be greater than or equal to 0.'
      end

      @minus_format = minus_format
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] role Object to be assigned
    def role=(role)
      validator = EnumAttributeValidator.new('String', ["admin", "simple_accounting", "self_only", "read_only"])
      unless validator.valid?(role)
        fail ArgumentError, "invalid value for \"role\", must be one of #{validator.allowable_values}."
      end
      @role = role
    end

    # Custom attribute writer method with validation
    # @param [Object] prefecture_code Value to be assigned
    def prefecture_code=(prefecture_code)
      if prefecture_code.nil?
        fail ArgumentError, 'prefecture_code cannot be nil'
      end

      if prefecture_code > 46
        fail ArgumentError, 'invalid value for "prefecture_code", must be smaller than or equal to 46.'
      end

      if prefecture_code < 0
        fail ArgumentError, 'invalid value for "prefecture_code", must be greater than or equal to 0.'
      end

      @prefecture_code = prefecture_code
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_layout Value to be assigned
    def invoice_layout=(invoice_layout)
      if invoice_layout.nil?
        fail ArgumentError, 'invoice_layout cannot be nil'
      end

      if invoice_layout > 5
        fail ArgumentError, 'invalid value for "invoice_layout", must be smaller than or equal to 5.'
      end

      if invoice_layout < 0
        fail ArgumentError, 'invalid value for "invoice_layout", must be greater than or equal to 0.'
      end

      @invoice_layout = invoice_layout
    end

    # Custom attribute writer method with validation
    # @param [Object] invoice_style Value to be assigned
    def invoice_style=(invoice_style)
      if invoice_style.nil?
        fail ArgumentError, 'invoice_style cannot be nil'
      end

      if invoice_style > 1
        fail ArgumentError, 'invalid value for "invoice_style", must be smaller than or equal to 1.'
      end

      if invoice_style < 0
        fail ArgumentError, 'invalid value for "invoice_style", must be greater than or equal to 0.'
      end

      @invoice_style = invoice_style
    end

    # Custom attribute writer method with validation
    # @param [Object] amount_fraction Value to be assigned
    def amount_fraction=(amount_fraction)
      if amount_fraction.nil?
        fail ArgumentError, 'amount_fraction cannot be nil'
      end

      if amount_fraction > 2
        fail ArgumentError, 'invalid value for "amount_fraction", must be smaller than or equal to 2.'
      end

      if amount_fraction < 0
        fail ArgumentError, 'invalid value for "amount_fraction", must be greater than or equal to 0.'
      end

      @amount_fraction = amount_fraction
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] industry_class Object to be assigned
    def industry_class=(industry_class)
      validator = EnumAttributeValidator.new('String', ["", "agriculture_forestry_fisheries_ore", "construction", "manufacturing_processing", "it", "transportation_logistics", "retail_wholesale", "finance_insurance", "real_estate_rental", "profession", "design_production", "food", "lifestyle", "education", "medical_welfare", "other_services", "other"])
      unless validator.valid?(industry_class)
        fail ArgumentError, "invalid value for \"industry_class\", must be one of #{validator.allowable_values}."
      end
      @industry_class = industry_class
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] industry_code Object to be assigned
    def industry_code=(industry_code)
      validator = EnumAttributeValidator.new('String', ["", "transport_delivery", "delivery", "other_transportation_logistics"])
      unless validator.valid?(industry_code)
        fail ArgumentError, "invalid value for \"industry_code\", must be one of #{validator.allowable_values}."
      end
      @industry_code = industry_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] workflow_setting Object to be assigned
    def workflow_setting=(workflow_setting)
      validator = EnumAttributeValidator.new('String', ["enable", "disable"])
      unless validator.valid?(workflow_setting)
        fail ArgumentError, "invalid value for \"workflow_setting\", must be one of #{validator.allowable_values}."
      end
      @workflow_setting = workflow_setting
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          name_kana == o.name_kana &&
          display_name == o.display_name &&
          tax_at_source_calc_type == o.tax_at_source_calc_type &&
          contact_name == o.contact_name &&
          head_count == o.head_count &&
          corporate_number == o.corporate_number &&
          txn_number_format == o.txn_number_format &&
          default_wallet_account_id == o.default_wallet_account_id &&
          private_settlement == o.private_settlement &&
          minus_format == o.minus_format &&
          role == o.role &&
          phone1 == o.phone1 &&
          phone2 == o.phone2 &&
          fax == o.fax &&
          zipcode == o.zipcode &&
          prefecture_code == o.prefecture_code &&
          street_name1 == o.street_name1 &&
          street_name2 == o.street_name2 &&
          invoice_layout == o.invoice_layout &&
          invoice_style == o.invoice_style &&
          amount_fraction == o.amount_fraction &&
          industry_class == o.industry_class &&
          industry_code == o.industry_code &&
          workflow_setting == o.workflow_setting &&
          fiscal_years == o.fiscal_years
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, name_kana, display_name, tax_at_source_calc_type, contact_name, head_count, corporate_number, txn_number_format, default_wallet_account_id, private_settlement, minus_format, role, phone1, phone2, fax, zipcode, prefecture_code, street_name1, street_name2, invoice_layout, invoice_style, amount_fraction, industry_class, industry_code, workflow_setting, fiscal_years].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        UnofficialFreeeSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
