=begin
#freee API

# <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"_9\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_10\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"_11\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"_12\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"_13\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <hr /> <h2 id=\"_14\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module UnofficialFreeeSdk
  class FiscalYears
    # 製造業向け機能（true: 使用する、false: 使用しない）
    attr_accessor :use_industry_template

    # 固定資産の控除法(false: 減価償却累計額でまとめる、true: 独立間接控除方式)
    attr_accessor :indirect_write_off_method

    # 期首日
    attr_accessor :start_date

    # 期末日
    attr_accessor :end_date

    # 月次償却（0: しない、1: する）
    attr_accessor :depreciation_record_method

    # 課税区分（0: 免税、1: 簡易課税、2: 本則課税（個別対応方式）、3: 本則課税（一括比例配分方式）、4: 本則課税（全額控除））
    attr_accessor :tax_method

    # 簡易課税用事業区分（0: 第一種：卸売業、1: 第二種：小売業、2: 第三種：農林水産業、工業、建設業、製造業など、3: 第四種：飲食店業など、4: 第五種：金融・保険業、運輸通信業、サービス業など、5: 第六種：不動産業など
    attr_accessor :sales_tax_business_code

    # 消費税端数処理方法（0: 切り捨て、1: 切り上げ、2: 四捨五入）
    attr_accessor :tax_fraction

    # 消費税経理処理方法（0: 税込経理、1: 旧税抜経理、2: 税抜経理）
    attr_accessor :tax_account_method

    # 不動産所得使用区分（0: 一般、1: 一般/不動産） ※個人事業主のみ設定可能
    attr_accessor :return_code

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'use_industry_template' => :'use_industry_template',
        :'indirect_write_off_method' => :'indirect_write_off_method',
        :'start_date' => :'start_date',
        :'end_date' => :'end_date',
        :'depreciation_record_method' => :'depreciation_record_method',
        :'tax_method' => :'tax_method',
        :'sales_tax_business_code' => :'sales_tax_business_code',
        :'tax_fraction' => :'tax_fraction',
        :'tax_account_method' => :'tax_account_method',
        :'return_code' => :'return_code'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'use_industry_template' => :'Boolean',
        :'indirect_write_off_method' => :'Boolean',
        :'start_date' => :'String',
        :'end_date' => :'String',
        :'depreciation_record_method' => :'Integer',
        :'tax_method' => :'Integer',
        :'sales_tax_business_code' => :'Integer',
        :'tax_fraction' => :'Integer',
        :'tax_account_method' => :'Integer',
        :'return_code' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnofficialFreeeSdk::FiscalYears` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnofficialFreeeSdk::FiscalYears`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'use_industry_template')
        self.use_industry_template = attributes[:'use_industry_template']
      end

      if attributes.key?(:'indirect_write_off_method')
        self.indirect_write_off_method = attributes[:'indirect_write_off_method']
      end

      if attributes.key?(:'start_date')
        self.start_date = attributes[:'start_date']
      end

      if attributes.key?(:'end_date')
        self.end_date = attributes[:'end_date']
      end

      if attributes.key?(:'depreciation_record_method')
        self.depreciation_record_method = attributes[:'depreciation_record_method']
      end

      if attributes.key?(:'tax_method')
        self.tax_method = attributes[:'tax_method']
      end

      if attributes.key?(:'sales_tax_business_code')
        self.sales_tax_business_code = attributes[:'sales_tax_business_code']
      end

      if attributes.key?(:'tax_fraction')
        self.tax_fraction = attributes[:'tax_fraction']
      end

      if attributes.key?(:'tax_account_method')
        self.tax_account_method = attributes[:'tax_account_method']
      end

      if attributes.key?(:'return_code')
        self.return_code = attributes[:'return_code']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @use_industry_template.nil?
        invalid_properties.push('invalid value for "use_industry_template", use_industry_template cannot be nil.')
      end

      if @indirect_write_off_method.nil?
        invalid_properties.push('invalid value for "indirect_write_off_method", indirect_write_off_method cannot be nil.')
      end

      if @depreciation_record_method.nil?
        invalid_properties.push('invalid value for "depreciation_record_method", depreciation_record_method cannot be nil.')
      end

      if @depreciation_record_method > 1
        invalid_properties.push('invalid value for "depreciation_record_method", must be smaller than or equal to 1.')
      end

      if @depreciation_record_method < 0
        invalid_properties.push('invalid value for "depreciation_record_method", must be greater than or equal to 0.')
      end

      if @tax_method.nil?
        invalid_properties.push('invalid value for "tax_method", tax_method cannot be nil.')
      end

      if @tax_method > 4
        invalid_properties.push('invalid value for "tax_method", must be smaller than or equal to 4.')
      end

      if @tax_method < 0
        invalid_properties.push('invalid value for "tax_method", must be greater than or equal to 0.')
      end

      if @sales_tax_business_code.nil?
        invalid_properties.push('invalid value for "sales_tax_business_code", sales_tax_business_code cannot be nil.')
      end

      if @sales_tax_business_code > 5
        invalid_properties.push('invalid value for "sales_tax_business_code", must be smaller than or equal to 5.')
      end

      if @sales_tax_business_code < 0
        invalid_properties.push('invalid value for "sales_tax_business_code", must be greater than or equal to 0.')
      end

      if @tax_fraction.nil?
        invalid_properties.push('invalid value for "tax_fraction", tax_fraction cannot be nil.')
      end

      if @tax_fraction > 2
        invalid_properties.push('invalid value for "tax_fraction", must be smaller than or equal to 2.')
      end

      if @tax_fraction < 0
        invalid_properties.push('invalid value for "tax_fraction", must be greater than or equal to 0.')
      end

      if @tax_account_method.nil?
        invalid_properties.push('invalid value for "tax_account_method", tax_account_method cannot be nil.')
      end

      if @tax_account_method > 2
        invalid_properties.push('invalid value for "tax_account_method", must be smaller than or equal to 2.')
      end

      if @tax_account_method < 0
        invalid_properties.push('invalid value for "tax_account_method", must be greater than or equal to 0.')
      end

      if @return_code.nil?
        invalid_properties.push('invalid value for "return_code", return_code cannot be nil.')
      end

      if @return_code > 1
        invalid_properties.push('invalid value for "return_code", must be smaller than or equal to 1.')
      end

      if @return_code < 0
        invalid_properties.push('invalid value for "return_code", must be greater than or equal to 0.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @use_industry_template.nil?
      return false if @indirect_write_off_method.nil?
      return false if @depreciation_record_method.nil?
      return false if @depreciation_record_method > 1
      return false if @depreciation_record_method < 0
      return false if @tax_method.nil?
      return false if @tax_method > 4
      return false if @tax_method < 0
      return false if @sales_tax_business_code.nil?
      return false if @sales_tax_business_code > 5
      return false if @sales_tax_business_code < 0
      return false if @tax_fraction.nil?
      return false if @tax_fraction > 2
      return false if @tax_fraction < 0
      return false if @tax_account_method.nil?
      return false if @tax_account_method > 2
      return false if @tax_account_method < 0
      return false if @return_code.nil?
      return false if @return_code > 1
      return false if @return_code < 0
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] depreciation_record_method Value to be assigned
    def depreciation_record_method=(depreciation_record_method)
      if depreciation_record_method.nil?
        fail ArgumentError, 'depreciation_record_method cannot be nil'
      end

      if depreciation_record_method > 1
        fail ArgumentError, 'invalid value for "depreciation_record_method", must be smaller than or equal to 1.'
      end

      if depreciation_record_method < 0
        fail ArgumentError, 'invalid value for "depreciation_record_method", must be greater than or equal to 0.'
      end

      @depreciation_record_method = depreciation_record_method
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_method Value to be assigned
    def tax_method=(tax_method)
      if tax_method.nil?
        fail ArgumentError, 'tax_method cannot be nil'
      end

      if tax_method > 4
        fail ArgumentError, 'invalid value for "tax_method", must be smaller than or equal to 4.'
      end

      if tax_method < 0
        fail ArgumentError, 'invalid value for "tax_method", must be greater than or equal to 0.'
      end

      @tax_method = tax_method
    end

    # Custom attribute writer method with validation
    # @param [Object] sales_tax_business_code Value to be assigned
    def sales_tax_business_code=(sales_tax_business_code)
      if sales_tax_business_code.nil?
        fail ArgumentError, 'sales_tax_business_code cannot be nil'
      end

      if sales_tax_business_code > 5
        fail ArgumentError, 'invalid value for "sales_tax_business_code", must be smaller than or equal to 5.'
      end

      if sales_tax_business_code < 0
        fail ArgumentError, 'invalid value for "sales_tax_business_code", must be greater than or equal to 0.'
      end

      @sales_tax_business_code = sales_tax_business_code
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_fraction Value to be assigned
    def tax_fraction=(tax_fraction)
      if tax_fraction.nil?
        fail ArgumentError, 'tax_fraction cannot be nil'
      end

      if tax_fraction > 2
        fail ArgumentError, 'invalid value for "tax_fraction", must be smaller than or equal to 2.'
      end

      if tax_fraction < 0
        fail ArgumentError, 'invalid value for "tax_fraction", must be greater than or equal to 0.'
      end

      @tax_fraction = tax_fraction
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_account_method Value to be assigned
    def tax_account_method=(tax_account_method)
      if tax_account_method.nil?
        fail ArgumentError, 'tax_account_method cannot be nil'
      end

      if tax_account_method > 2
        fail ArgumentError, 'invalid value for "tax_account_method", must be smaller than or equal to 2.'
      end

      if tax_account_method < 0
        fail ArgumentError, 'invalid value for "tax_account_method", must be greater than or equal to 0.'
      end

      @tax_account_method = tax_account_method
    end

    # Custom attribute writer method with validation
    # @param [Object] return_code Value to be assigned
    def return_code=(return_code)
      if return_code.nil?
        fail ArgumentError, 'return_code cannot be nil'
      end

      if return_code > 1
        fail ArgumentError, 'invalid value for "return_code", must be smaller than or equal to 1.'
      end

      if return_code < 0
        fail ArgumentError, 'invalid value for "return_code", must be greater than or equal to 0.'
      end

      @return_code = return_code
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          use_industry_template == o.use_industry_template &&
          indirect_write_off_method == o.indirect_write_off_method &&
          start_date == o.start_date &&
          end_date == o.end_date &&
          depreciation_record_method == o.depreciation_record_method &&
          tax_method == o.tax_method &&
          sales_tax_business_code == o.sales_tax_business_code &&
          tax_fraction == o.tax_fraction &&
          tax_account_method == o.tax_account_method &&
          return_code == o.return_code
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [use_industry_template, indirect_write_off_method, start_date, end_date, depreciation_record_method, tax_method, sales_tax_business_code, tax_fraction, tax_account_method, return_code].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        UnofficialFreeeSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
