=begin
#freee API

# <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"_9\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_10\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"_11\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"_12\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"_13\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <hr /> <h2 id=\"_14\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module UnofficialFreeeSdk
  class InvoiceResponseInvoice
    # 請求書ID
    attr_accessor :id

    # 事業所ID
    attr_accessor :company_id

    # 請求日 (yyyy-mm-dd)
    attr_accessor :issue_date

    # 取引先ID
    attr_accessor :partner_id

    # 取引先コード
    attr_accessor :partner_code

    # 請求書番号
    attr_accessor :invoice_number

    # タイトル
    attr_accessor :title

    # 期日 (yyyy-mm-dd)
    attr_accessor :due_date

    # 合計金額
    attr_accessor :total_amount

    # 合計金額
    attr_accessor :total_vat

    # 小計
    attr_accessor :sub_total

    # 売上計上日
    attr_accessor :booking_date

    # 概要
    attr_accessor :description

    # 請求書ステータス  (draft: 下書き, applying: 申請中, remanded: 差し戻し, rejected: 却下, approved: 承認済み, issued: 発行済み)
    attr_accessor :invoice_status

    # 入金ステータス  (unsettled: 入金待ち, settled: 入金済み)
    attr_accessor :payment_status

    # 入金日
    attr_accessor :payment_date

    # Web共有日時(最新)
    attr_accessor :web_published_at

    # Web共有ダウンロード日時(最新)
    attr_accessor :web_downloaded_at

    # Web共有取引先確認日時(最新)
    attr_accessor :web_confirmed_at

    # メール送信日時(最新)
    attr_accessor :mail_sent_at

    # 郵送ステータス(unrequested: リクエスト前, preview_registered: プレビュー登録, preview_failed: プレビュー登録失敗, ordered: 注文中, order_failed: 注文失敗, printing: 印刷中, canceled: キャンセル, posted: 投函済み)
    attr_accessor :posting_status

    # 取引先名
    attr_accessor :partner_name

    # 取引先正式名称
    attr_accessor :partner_long_name

    # 敬称（御中、様、(空白)の3つから選択）
    attr_accessor :partner_title

    # 郵便番号
    attr_accessor :partner_zipcode

    # 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
    attr_accessor :partner_prefecture_code

    # 都道府県
    attr_accessor :partner_prefecture_name

    # 市区町村・番地
    attr_accessor :partner_address1

    # 建物名・部屋番号など
    attr_accessor :partner_address2

    # 取引先担当者名
    attr_accessor :partner_contact_info

    # 事業所名
    attr_accessor :company_name

    # 郵便番号
    attr_accessor :company_zipcode

    # 都道府県コード（0:北海道、1:青森、2:岩手、3:宮城、4:秋田、5:山形、6:福島、7:茨城、8:栃木、9:群馬、10:埼玉、11:千葉、12:東京、13:神奈川、14:新潟、15:富山、16:石川、17:福井、18:山梨、19:長野、20:岐阜、21:静岡、22:愛知、23:三重、24:滋賀、25:京都、26:大阪、27:兵庫、28:奈良、29:和歌山、30:鳥取、31:島根、32:岡山、33:広島、34:山口、35:徳島、36:香川、37:愛媛、38:高知、39:福岡、40:佐賀、41:長崎、42:熊本、43:大分、44:宮崎、45:鹿児島、46:沖縄
    attr_accessor :company_prefecture_code

    # 都道府県
    attr_accessor :company_prefecture_name

    # 市区町村・番地
    attr_accessor :company_address1

    # 建物名・部屋番号など
    attr_accessor :company_address2

    # 事業所担当者名
    attr_accessor :company_contact_info

    # 支払方法 (振込: transfer, 引き落とし: direct_debit)
    attr_accessor :payment_type

    # 支払口座
    attr_accessor :payment_bank_info

    # メッセージ
    attr_accessor :message

    # 備考
    attr_accessor :notes

    # レイアウト(default_classic: レイアウト１/クラシック, standard_classic: レイアウト２/クラシック, envelope_classic: 封筒１/クラシック, carried_forward_standard_classic: レイアウト３（繰越金額欄あり）/クラシック, carried_forward_envelope_classic: 封筒２（繰越金額欄あり）/クラシック, default_modern: レイアウト１/モダン, standard_modern: レイアウト２/モダン, envelope_modern: 封筒/モダン)
    attr_accessor :invoice_layout

    # 請求書の消費税計算方法(inclusive: 内税, exclusive: 外税)
    attr_accessor :tax_entry_method

    # 取引ID (invoice_statusがissuedの時のみIDが表示されます)
    attr_accessor :deal_id

    # 請求内容
    attr_accessor :invoice_contents

    attr_accessor :total_amount_per_vat_rate

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'company_id' => :'company_id',
        :'issue_date' => :'issue_date',
        :'partner_id' => :'partner_id',
        :'partner_code' => :'partner_code',
        :'invoice_number' => :'invoice_number',
        :'title' => :'title',
        :'due_date' => :'due_date',
        :'total_amount' => :'total_amount',
        :'total_vat' => :'total_vat',
        :'sub_total' => :'sub_total',
        :'booking_date' => :'booking_date',
        :'description' => :'description',
        :'invoice_status' => :'invoice_status',
        :'payment_status' => :'payment_status',
        :'payment_date' => :'payment_date',
        :'web_published_at' => :'web_published_at',
        :'web_downloaded_at' => :'web_downloaded_at',
        :'web_confirmed_at' => :'web_confirmed_at',
        :'mail_sent_at' => :'mail_sent_at',
        :'posting_status' => :'posting_status',
        :'partner_name' => :'partner_name',
        :'partner_long_name' => :'partner_long_name',
        :'partner_title' => :'partner_title',
        :'partner_zipcode' => :'partner_zipcode',
        :'partner_prefecture_code' => :'partner_prefecture_code',
        :'partner_prefecture_name' => :'partner_prefecture_name',
        :'partner_address1' => :'partner_address1',
        :'partner_address2' => :'partner_address2',
        :'partner_contact_info' => :'partner_contact_info',
        :'company_name' => :'company_name',
        :'company_zipcode' => :'company_zipcode',
        :'company_prefecture_code' => :'company_prefecture_code',
        :'company_prefecture_name' => :'company_prefecture_name',
        :'company_address1' => :'company_address1',
        :'company_address2' => :'company_address2',
        :'company_contact_info' => :'company_contact_info',
        :'payment_type' => :'payment_type',
        :'payment_bank_info' => :'payment_bank_info',
        :'message' => :'message',
        :'notes' => :'notes',
        :'invoice_layout' => :'invoice_layout',
        :'tax_entry_method' => :'tax_entry_method',
        :'deal_id' => :'deal_id',
        :'invoice_contents' => :'invoice_contents',
        :'total_amount_per_vat_rate' => :'total_amount_per_vat_rate'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'company_id' => :'Integer',
        :'issue_date' => :'String',
        :'partner_id' => :'Integer',
        :'partner_code' => :'String',
        :'invoice_number' => :'String',
        :'title' => :'String',
        :'due_date' => :'String',
        :'total_amount' => :'Integer',
        :'total_vat' => :'Integer',
        :'sub_total' => :'Integer',
        :'booking_date' => :'String',
        :'description' => :'String',
        :'invoice_status' => :'String',
        :'payment_status' => :'String',
        :'payment_date' => :'String',
        :'web_published_at' => :'String',
        :'web_downloaded_at' => :'String',
        :'web_confirmed_at' => :'String',
        :'mail_sent_at' => :'String',
        :'posting_status' => :'String',
        :'partner_name' => :'String',
        :'partner_long_name' => :'String',
        :'partner_title' => :'String',
        :'partner_zipcode' => :'String',
        :'partner_prefecture_code' => :'Integer',
        :'partner_prefecture_name' => :'String',
        :'partner_address1' => :'String',
        :'partner_address2' => :'String',
        :'partner_contact_info' => :'String',
        :'company_name' => :'String',
        :'company_zipcode' => :'String',
        :'company_prefecture_code' => :'Integer',
        :'company_prefecture_name' => :'String',
        :'company_address1' => :'String',
        :'company_address2' => :'String',
        :'company_contact_info' => :'String',
        :'payment_type' => :'String',
        :'payment_bank_info' => :'String',
        :'message' => :'String',
        :'notes' => :'String',
        :'invoice_layout' => :'String',
        :'tax_entry_method' => :'String',
        :'deal_id' => :'Integer',
        :'invoice_contents' => :'Array<InvoiceResponseInvoiceInvoiceContents>',
        :'total_amount_per_vat_rate' => :'InvoiceResponseInvoiceTotalAmountPerVatRate'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'partner_id',
        :'partner_code',
        :'title',
        :'due_date',
        :'booking_date',
        :'description',
        :'payment_date',
        :'web_published_at',
        :'web_downloaded_at',
        :'web_confirmed_at',
        :'mail_sent_at',
        :'partner_name',
        :'partner_long_name',
        :'partner_title',
        :'partner_zipcode',
        :'partner_prefecture_code',
        :'partner_prefecture_name',
        :'partner_address1',
        :'partner_address2',
        :'partner_contact_info',
        :'company_zipcode',
        :'company_prefecture_code',
        :'company_prefecture_name',
        :'company_address1',
        :'company_address2',
        :'company_contact_info',
        :'payment_bank_info',
        :'message',
        :'notes',
        :'deal_id',
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnofficialFreeeSdk::InvoiceResponseInvoice` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnofficialFreeeSdk::InvoiceResponseInvoice`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'issue_date')
        self.issue_date = attributes[:'issue_date']
      end

      if attributes.key?(:'partner_id')
        self.partner_id = attributes[:'partner_id']
      end

      if attributes.key?(:'partner_code')
        self.partner_code = attributes[:'partner_code']
      end

      if attributes.key?(:'invoice_number')
        self.invoice_number = attributes[:'invoice_number']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'due_date')
        self.due_date = attributes[:'due_date']
      end

      if attributes.key?(:'total_amount')
        self.total_amount = attributes[:'total_amount']
      end

      if attributes.key?(:'total_vat')
        self.total_vat = attributes[:'total_vat']
      end

      if attributes.key?(:'sub_total')
        self.sub_total = attributes[:'sub_total']
      end

      if attributes.key?(:'booking_date')
        self.booking_date = attributes[:'booking_date']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'invoice_status')
        self.invoice_status = attributes[:'invoice_status']
      end

      if attributes.key?(:'payment_status')
        self.payment_status = attributes[:'payment_status']
      end

      if attributes.key?(:'payment_date')
        self.payment_date = attributes[:'payment_date']
      end

      if attributes.key?(:'web_published_at')
        self.web_published_at = attributes[:'web_published_at']
      end

      if attributes.key?(:'web_downloaded_at')
        self.web_downloaded_at = attributes[:'web_downloaded_at']
      end

      if attributes.key?(:'web_confirmed_at')
        self.web_confirmed_at = attributes[:'web_confirmed_at']
      end

      if attributes.key?(:'mail_sent_at')
        self.mail_sent_at = attributes[:'mail_sent_at']
      end

      if attributes.key?(:'posting_status')
        self.posting_status = attributes[:'posting_status']
      end

      if attributes.key?(:'partner_name')
        self.partner_name = attributes[:'partner_name']
      end

      if attributes.key?(:'partner_long_name')
        self.partner_long_name = attributes[:'partner_long_name']
      end

      if attributes.key?(:'partner_title')
        self.partner_title = attributes[:'partner_title']
      end

      if attributes.key?(:'partner_zipcode')
        self.partner_zipcode = attributes[:'partner_zipcode']
      end

      if attributes.key?(:'partner_prefecture_code')
        self.partner_prefecture_code = attributes[:'partner_prefecture_code']
      end

      if attributes.key?(:'partner_prefecture_name')
        self.partner_prefecture_name = attributes[:'partner_prefecture_name']
      end

      if attributes.key?(:'partner_address1')
        self.partner_address1 = attributes[:'partner_address1']
      end

      if attributes.key?(:'partner_address2')
        self.partner_address2 = attributes[:'partner_address2']
      end

      if attributes.key?(:'partner_contact_info')
        self.partner_contact_info = attributes[:'partner_contact_info']
      end

      if attributes.key?(:'company_name')
        self.company_name = attributes[:'company_name']
      end

      if attributes.key?(:'company_zipcode')
        self.company_zipcode = attributes[:'company_zipcode']
      end

      if attributes.key?(:'company_prefecture_code')
        self.company_prefecture_code = attributes[:'company_prefecture_code']
      end

      if attributes.key?(:'company_prefecture_name')
        self.company_prefecture_name = attributes[:'company_prefecture_name']
      end

      if attributes.key?(:'company_address1')
        self.company_address1 = attributes[:'company_address1']
      end

      if attributes.key?(:'company_address2')
        self.company_address2 = attributes[:'company_address2']
      end

      if attributes.key?(:'company_contact_info')
        self.company_contact_info = attributes[:'company_contact_info']
      end

      if attributes.key?(:'payment_type')
        self.payment_type = attributes[:'payment_type']
      end

      if attributes.key?(:'payment_bank_info')
        self.payment_bank_info = attributes[:'payment_bank_info']
      end

      if attributes.key?(:'message')
        self.message = attributes[:'message']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'invoice_layout')
        self.invoice_layout = attributes[:'invoice_layout']
      end

      if attributes.key?(:'tax_entry_method')
        self.tax_entry_method = attributes[:'tax_entry_method']
      end

      if attributes.key?(:'deal_id')
        self.deal_id = attributes[:'deal_id']
      end

      if attributes.key?(:'invoice_contents')
        if (value = attributes[:'invoice_contents']).is_a?(Array)
          self.invoice_contents = value
        end
      end

      if attributes.key?(:'total_amount_per_vat_rate')
        self.total_amount_per_vat_rate = attributes[:'total_amount_per_vat_rate']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id > 999999999999
        invalid_properties.push('invalid value for "id", must be smaller than or equal to 999999999999.')
      end

      if @id < 1
        invalid_properties.push('invalid value for "id", must be greater than or equal to 1.')
      end

      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @company_id > 4294967295
        invalid_properties.push('invalid value for "company_id", must be smaller than or equal to 4294967295.')
      end

      if @company_id < 1
        invalid_properties.push('invalid value for "company_id", must be greater than or equal to 1.')
      end

      if @issue_date.nil?
        invalid_properties.push('invalid value for "issue_date", issue_date cannot be nil.')
      end

      if @partner_id > 999999999999
        invalid_properties.push('invalid value for "partner_id", must be smaller than or equal to 999999999999.')
      end

      if @partner_id < 1
        invalid_properties.push('invalid value for "partner_id", must be greater than or equal to 1.')
      end

      if @invoice_number.nil?
        invalid_properties.push('invalid value for "invoice_number", invoice_number cannot be nil.')
      end

      if @total_amount.nil?
        invalid_properties.push('invalid value for "total_amount", total_amount cannot be nil.')
      end

      if @invoice_status.nil?
        invalid_properties.push('invalid value for "invoice_status", invoice_status cannot be nil.')
      end

      if @posting_status.nil?
        invalid_properties.push('invalid value for "posting_status", posting_status cannot be nil.')
      end

      if !@partner_prefecture_code.nil? && @partner_prefecture_code > 46
        invalid_properties.push('invalid value for "partner_prefecture_code", must be smaller than or equal to 46.')
      end

      if !@partner_prefecture_code.nil? && @partner_prefecture_code < 0
        invalid_properties.push('invalid value for "partner_prefecture_code", must be greater than or equal to 0.')
      end

      if @company_name.nil?
        invalid_properties.push('invalid value for "company_name", company_name cannot be nil.')
      end

      if !@company_prefecture_code.nil? && @company_prefecture_code > 46
        invalid_properties.push('invalid value for "company_prefecture_code", must be smaller than or equal to 46.')
      end

      if !@company_prefecture_code.nil? && @company_prefecture_code < 0
        invalid_properties.push('invalid value for "company_prefecture_code", must be greater than or equal to 0.')
      end

      if @payment_type.nil?
        invalid_properties.push('invalid value for "payment_type", payment_type cannot be nil.')
      end

      if @invoice_layout.nil?
        invalid_properties.push('invalid value for "invoice_layout", invoice_layout cannot be nil.')
      end

      if @tax_entry_method.nil?
        invalid_properties.push('invalid value for "tax_entry_method", tax_entry_method cannot be nil.')
      end

      if !@deal_id.nil? && @deal_id > 999999999999
        invalid_properties.push('invalid value for "deal_id", must be smaller than or equal to 999999999999.')
      end

      if !@deal_id.nil? && @deal_id < 1
        invalid_properties.push('invalid value for "deal_id", must be greater than or equal to 1.')
      end

      if @total_amount_per_vat_rate.nil?
        invalid_properties.push('invalid value for "total_amount_per_vat_rate", total_amount_per_vat_rate cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id > 999999999999
      return false if @id < 1
      return false if @company_id.nil?
      return false if @company_id > 4294967295
      return false if @company_id < 1
      return false if @issue_date.nil?
      return false if @partner_id > 999999999999
      return false if @partner_id < 1
      return false if @invoice_number.nil?
      return false if @total_amount.nil?
      return false if @invoice_status.nil?
      invoice_status_validator = EnumAttributeValidator.new('String', ["draft", "applying", "remanded", "rejected", "approved", "issued"])
      return false unless invoice_status_validator.valid?(@invoice_status)
      payment_status_validator = EnumAttributeValidator.new('String', ["", "unsettled", "settled"])
      return false unless payment_status_validator.valid?(@payment_status)
      return false if @posting_status.nil?
      posting_status_validator = EnumAttributeValidator.new('String', ["", "unrequested", "preview_registered", "preview_failed", "ordered", "order_failed", "printing", "canceled", "posted"])
      return false unless posting_status_validator.valid?(@posting_status)
      return false if !@partner_prefecture_code.nil? && @partner_prefecture_code > 46
      return false if !@partner_prefecture_code.nil? && @partner_prefecture_code < 0
      return false if @company_name.nil?
      return false if !@company_prefecture_code.nil? && @company_prefecture_code > 46
      return false if !@company_prefecture_code.nil? && @company_prefecture_code < 0
      return false if @payment_type.nil?
      payment_type_validator = EnumAttributeValidator.new('String', ["", "transfer", "direct_debit"])
      return false unless payment_type_validator.valid?(@payment_type)
      return false if @invoice_layout.nil?
      invoice_layout_validator = EnumAttributeValidator.new('String', ["default_classic", "standard_classic", "envelope_classic", "carried_forward_standard_classic", "carried_forward_envelope_classic", "default_modern", "standard_modern", "envelope_modern"])
      return false unless invoice_layout_validator.valid?(@invoice_layout)
      return false if @tax_entry_method.nil?
      tax_entry_method_validator = EnumAttributeValidator.new('String', ["", "inclusive", "exclusive"])
      return false unless tax_entry_method_validator.valid?(@tax_entry_method)
      return false if !@deal_id.nil? && @deal_id > 999999999999
      return false if !@deal_id.nil? && @deal_id < 1
      return false if @total_amount_per_vat_rate.nil?
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id > 999999999999
        fail ArgumentError, 'invalid value for "id", must be smaller than or equal to 999999999999.'
      end

      if id < 1
        fail ArgumentError, 'invalid value for "id", must be greater than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if company_id.nil?
        fail ArgumentError, 'company_id cannot be nil'
      end

      if company_id > 4294967295
        fail ArgumentError, 'invalid value for "company_id", must be smaller than or equal to 4294967295.'
      end

      if company_id < 1
        fail ArgumentError, 'invalid value for "company_id", must be greater than or equal to 1.'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] partner_id Value to be assigned
    def partner_id=(partner_id)
      if partner_id > 999999999999
        fail ArgumentError, 'invalid value for "partner_id", must be smaller than or equal to 999999999999.'
      end

      if partner_id < 1
        fail ArgumentError, 'invalid value for "partner_id", must be greater than or equal to 1.'
      end

      @partner_id = partner_id
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_status Object to be assigned
    def invoice_status=(invoice_status)
      validator = EnumAttributeValidator.new('String', ["draft", "applying", "remanded", "rejected", "approved", "issued"])
      unless validator.valid?(invoice_status)
        fail ArgumentError, "invalid value for \"invoice_status\", must be one of #{validator.allowable_values}."
      end
      @invoice_status = invoice_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_status Object to be assigned
    def payment_status=(payment_status)
      validator = EnumAttributeValidator.new('String', ["", "unsettled", "settled"])
      unless validator.valid?(payment_status)
        fail ArgumentError, "invalid value for \"payment_status\", must be one of #{validator.allowable_values}."
      end
      @payment_status = payment_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] posting_status Object to be assigned
    def posting_status=(posting_status)
      validator = EnumAttributeValidator.new('String', ["", "unrequested", "preview_registered", "preview_failed", "ordered", "order_failed", "printing", "canceled", "posted"])
      unless validator.valid?(posting_status)
        fail ArgumentError, "invalid value for \"posting_status\", must be one of #{validator.allowable_values}."
      end
      @posting_status = posting_status
    end

    # Custom attribute writer method with validation
    # @param [Object] partner_prefecture_code Value to be assigned
    def partner_prefecture_code=(partner_prefecture_code)
      if !partner_prefecture_code.nil? && partner_prefecture_code > 46
        fail ArgumentError, 'invalid value for "partner_prefecture_code", must be smaller than or equal to 46.'
      end

      if !partner_prefecture_code.nil? && partner_prefecture_code < 0
        fail ArgumentError, 'invalid value for "partner_prefecture_code", must be greater than or equal to 0.'
      end

      @partner_prefecture_code = partner_prefecture_code
    end

    # Custom attribute writer method with validation
    # @param [Object] company_prefecture_code Value to be assigned
    def company_prefecture_code=(company_prefecture_code)
      if !company_prefecture_code.nil? && company_prefecture_code > 46
        fail ArgumentError, 'invalid value for "company_prefecture_code", must be smaller than or equal to 46.'
      end

      if !company_prefecture_code.nil? && company_prefecture_code < 0
        fail ArgumentError, 'invalid value for "company_prefecture_code", must be greater than or equal to 0.'
      end

      @company_prefecture_code = company_prefecture_code
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] payment_type Object to be assigned
    def payment_type=(payment_type)
      validator = EnumAttributeValidator.new('String', ["", "transfer", "direct_debit"])
      unless validator.valid?(payment_type)
        fail ArgumentError, "invalid value for \"payment_type\", must be one of #{validator.allowable_values}."
      end
      @payment_type = payment_type
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] invoice_layout Object to be assigned
    def invoice_layout=(invoice_layout)
      validator = EnumAttributeValidator.new('String', ["default_classic", "standard_classic", "envelope_classic", "carried_forward_standard_classic", "carried_forward_envelope_classic", "default_modern", "standard_modern", "envelope_modern"])
      unless validator.valid?(invoice_layout)
        fail ArgumentError, "invalid value for \"invoice_layout\", must be one of #{validator.allowable_values}."
      end
      @invoice_layout = invoice_layout
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_entry_method Object to be assigned
    def tax_entry_method=(tax_entry_method)
      validator = EnumAttributeValidator.new('String', ["", "inclusive", "exclusive"])
      unless validator.valid?(tax_entry_method)
        fail ArgumentError, "invalid value for \"tax_entry_method\", must be one of #{validator.allowable_values}."
      end
      @tax_entry_method = tax_entry_method
    end

    # Custom attribute writer method with validation
    # @param [Object] deal_id Value to be assigned
    def deal_id=(deal_id)
      if !deal_id.nil? && deal_id > 999999999999
        fail ArgumentError, 'invalid value for "deal_id", must be smaller than or equal to 999999999999.'
      end

      if !deal_id.nil? && deal_id < 1
        fail ArgumentError, 'invalid value for "deal_id", must be greater than or equal to 1.'
      end

      @deal_id = deal_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          company_id == o.company_id &&
          issue_date == o.issue_date &&
          partner_id == o.partner_id &&
          partner_code == o.partner_code &&
          invoice_number == o.invoice_number &&
          title == o.title &&
          due_date == o.due_date &&
          total_amount == o.total_amount &&
          total_vat == o.total_vat &&
          sub_total == o.sub_total &&
          booking_date == o.booking_date &&
          description == o.description &&
          invoice_status == o.invoice_status &&
          payment_status == o.payment_status &&
          payment_date == o.payment_date &&
          web_published_at == o.web_published_at &&
          web_downloaded_at == o.web_downloaded_at &&
          web_confirmed_at == o.web_confirmed_at &&
          mail_sent_at == o.mail_sent_at &&
          posting_status == o.posting_status &&
          partner_name == o.partner_name &&
          partner_long_name == o.partner_long_name &&
          partner_title == o.partner_title &&
          partner_zipcode == o.partner_zipcode &&
          partner_prefecture_code == o.partner_prefecture_code &&
          partner_prefecture_name == o.partner_prefecture_name &&
          partner_address1 == o.partner_address1 &&
          partner_address2 == o.partner_address2 &&
          partner_contact_info == o.partner_contact_info &&
          company_name == o.company_name &&
          company_zipcode == o.company_zipcode &&
          company_prefecture_code == o.company_prefecture_code &&
          company_prefecture_name == o.company_prefecture_name &&
          company_address1 == o.company_address1 &&
          company_address2 == o.company_address2 &&
          company_contact_info == o.company_contact_info &&
          payment_type == o.payment_type &&
          payment_bank_info == o.payment_bank_info &&
          message == o.message &&
          notes == o.notes &&
          invoice_layout == o.invoice_layout &&
          tax_entry_method == o.tax_entry_method &&
          deal_id == o.deal_id &&
          invoice_contents == o.invoice_contents &&
          total_amount_per_vat_rate == o.total_amount_per_vat_rate
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, company_id, issue_date, partner_id, partner_code, invoice_number, title, due_date, total_amount, total_vat, sub_total, booking_date, description, invoice_status, payment_status, payment_date, web_published_at, web_downloaded_at, web_confirmed_at, mail_sent_at, posting_status, partner_name, partner_long_name, partner_title, partner_zipcode, partner_prefecture_code, partner_prefecture_name, partner_address1, partner_address2, partner_contact_info, company_name, company_zipcode, company_prefecture_code, company_prefecture_name, company_address1, company_address2, company_contact_info, payment_type, payment_bank_info, message, notes, invoice_layout, tax_entry_method, deal_id, invoice_contents, total_amount_per_vat_rate].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        UnofficialFreeeSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
