=begin
#freee API

# <h1 id=\"freee_api\">freee API</h1> <hr /> <h2 id=\"\">スタートガイド</h2>  <p>freee API開発がはじめての方は<a href=\"https://developer.freee.co.jp/getting-started\">freee API スタートガイド</a>を参照してください。</p>  <hr /> <h2 id=\"_2\">仕様</h2>  <h3 id=\"api\">APIエンドポイント</h3>  <p>https://api.freee.co.jp/ (httpsのみ)</p>  <h3 id=\"_3\">認証方式</h3>  <p><a href=\"http://tools.ietf.org/html/rfc6749\">OAuth2</a>に対応</p>  <ul> <li>Authorization Code Flow (Webアプリ向け)</li>  <li>Implicit Flow (Mobileアプリ向け)</li> </ul>  <h3 id=\"_4\">認証エンドポイント</h3>  <p>https://accounts.secure.freee.co.jp/</p>  <ul> <li>authorize : https://accounts.secure.freee.co.jp/public_api/authorize</li>  <li>token : https://accounts.secure.freee.co.jp/public_api/token</li> </ul>  <h3 id=\"_5\">アクセストークンのリフレッシュ</h3>  <p>認証時に得たrefresh_token を使ってtoken の期限をリフレッシュして新規に発行することが出来ます。</p>  <p>grant_type=refresh_token で https://accounts.secure.freee.co.jp/public_api/token にアクセスすればリフレッシュされます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/token</p>  <p>params: grant_type=refresh_token&amp;client_id=UID&amp;client_secret=SECRET&amp;refresh_token=REFRESH_TOKEN</p>  <p>詳細は<a href=\"https://github.com/applicake/doorkeeper/wiki/Enable-Refresh-Token-Credentials#flow\">refresh_token</a>を参照下さい。</p>  <h3 id=\"_6\">アクセストークンの破棄</h3>  <p>認証時に得たaccess_tokenまたはrefresh_tokenを使って、tokenを破棄することができます。 token=access_tokenまたはtoken=refresh_tokenでhttps://accounts.secure.freee.co.jp/public_api/revokeにアクセスすると破棄されます。token_type_hintでaccess_tokenまたはrefresh_tokenを陽に指定できます。</p>  <p>e.g.)</p>  <p>POST: https://accounts.secure.freee.co.jp/public_api/revoke</p>  <p>params: token=ACCESS_TOKEN</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN</p>  <p>または</p>  <p>params: token=ACCESS_TOKEN&amp;token_type_hint=access_token</p>  <p>または</p>  <p>params: token=REFRESH_TOKEN&amp;token_type_hint=refresh_token</p>  <p>詳細は <a href=\"https://tools.ietf.org/html/rfc7009\">OAuth 2.0 Token revocation</a> をご参照ください。</p>  <h3 id=\"_7\">データフォーマット</h3>  <p>リクエスト、レスポンスともにJSON形式をサポート</p>  <h3 id=\"_8\">後方互換性ありの変更</h3>  <p>freeeでは、APIを改善していくために以下のような変更は後方互換性ありとして通知なく変更を入れることがあります。アプリケーション実装者は以下を踏まえて開発を行ってください。</p>  <ul> <li>新しいAPIリソース・エンドポイントの追加</li> <li>既存のAPIに対して必須ではない新しいリクエストパラメータの追加</li> <li>既存のAPIレスポンスに対する新しいプロパティの追加</li> <li>既存のAPIレスポンスに対するプロパティの順番の入れ変え</li> <li>keyとなっているidやcodeの長さの変更（長くする）</li> </ul>  <h3 id=\"_9\">共通レスポンスヘッダー</h3>  <p>すべてのAPIのレスポンスには以下のHTTPヘッダーが含まれます。</p>  <ul> <li> <p>X-Freee-Request-ID</p> <ul> <li>各リクエスト毎に発行されるID</li> </ul> </li> </ul>  <h3 id=\"_10\">共通エラーレスポンス</h3>  <ul> <li> <p>ステータスコードはレスポンス内のJSONに含まれる他、HTTPヘッダにも含まれる</p> </li>  <li> <p>type</p>  <ul> <li>status : HTTPステータスコードの説明</li>  <li>validation : エラーの詳細の説明（開発者向け）</li> </ul> </li> </ul>  <p>レスポンスの例</p>  <pre><code>  {     &quot;status_code&quot; : 400,     &quot;errors&quot; : [       {         &quot;type&quot; : &quot;status&quot;,         &quot;messages&quot; : [&quot;不正なリクエストです。&quot;]       },       {         &quot;type&quot; : &quot;validation&quot;,         &quot;messages&quot; : [&quot;Date は不正な日付フォーマットです。入力例：2013-01-01&quot;]       }     ]   }</code></pre>  </br>  <h3 id=\"_11\">API使用制限</h3>    <p>freeeは一定期間に過度のアクセスを検知した場合、APIアクセスをコントロールする場合があります。</p>   <p>その際のhttp status codeは403となります。制限がかかってから10分程度が過ぎると再度使用することができるようになります。</p>  <h4 id=\"_12\">/reportsエンドポイント</h4>  <p>freeeは/reportsエンドポイントに対して1秒間に10以上のアクセスを検知した場合、APIアクセスをコントロールする場合があります。その際のhttp status codeは429（too many requests）となります。</p>  <p>レスポンスボディのmetaプロパティに以下を含めます。</p>  <ul>   <li>設定されている上限値</li>   <li>上限に達するまでの使用可能回数</li>   <li>（上限値に達した場合）使用回数がリセットされる時刻</li> </ul>  <h3 id=\"_13\">プラン別のAPI Rate Limit</h3>   <table border=\"1\">     <tbody>       <tr>         <th style=\"padding: 10px\"><strong>会計freeeプラン名</strong></th>         <th style=\"padding: 10px\"><strong>事業所とアプリケーション毎に1日でのAPIコール数</strong></th>       </tr>       <tr>         <td style=\"padding: 10px\">エンタープライズ</td>         <td style=\"padding: 10px\">10,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">プロフェッショナル</td>         <td style=\"padding: 10px\">5,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ベーシック</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">ミニマム</td>         <td style=\"padding: 10px\">3,000</td>       </tr>       <tr>         <td style=\"padding: 10px\">上記以外</td>         <td style=\"padding: 10px\">3,000</td>       </tr>     </tbody>   </table>  <hr /> <h2 id=\"_14\">連絡先</h2>  <p>ご不明点、ご要望等は <a href=\"https://support.freee.co.jp/hc/ja/requests/new\">freee サポートデスクへのお問い合わせフォーム</a> からご連絡ください。</p> <hr />&copy; Since 2013 freee K.K.

The version of the OpenAPI document: v1.0

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3

=end

require 'date'

module UnofficialFreeeSdk
  class AccountItemResponseAccountItem
    # 勘定科目ID
    attr_accessor :id

    # 勘定科目名 (30文字以内)
    attr_accessor :name

    # 事業所ID
    attr_accessor :company_id

    # 税区分コード
    attr_accessor :tax_code

    # 勘定科目のカテゴリーコード
    attr_accessor :account_category_id

    # ショートカット1 (20文字以内)
    attr_accessor :shortcut

    # ショートカット2(勘定科目コード) (20文字以内)
    attr_accessor :shortcut_num

    # 支出取引相手勘定科目種別
    attr_accessor :corresponding_type_expense

    # 収入取引相手勘定科目種別
    attr_accessor :corresponding_type_income

    # 検索可能:2, 検索不可：3
    attr_accessor :searchable

    # 減価償却累計額勘定科目
    attr_accessor :accumulated_dep_account_item_name

    attr_accessor :items

    attr_accessor :partners

    # 勘定科目の使用設定（true: 使用する、false: 使用しない）
    attr_accessor :available

    # 口座ID
    attr_accessor :walletable_id

    # 決算書表示名（小カテゴリー）
    attr_accessor :group_name

    # 収入取引相手勘定科目名
    attr_accessor :corresponding_income_name

    # 収入取引相手勘定科目ID
    attr_accessor :corresponding_income_id

    # 支出取引相手勘定科目名
    attr_accessor :corresponding_expense_name

    # 支出取引相手勘定科目ID
    attr_accessor :corresponding_expense_id

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'name' => :'name',
        :'company_id' => :'company_id',
        :'tax_code' => :'tax_code',
        :'account_category_id' => :'account_category_id',
        :'shortcut' => :'shortcut',
        :'shortcut_num' => :'shortcut_num',
        :'corresponding_type_expense' => :'corresponding_type_expense',
        :'corresponding_type_income' => :'corresponding_type_income',
        :'searchable' => :'searchable',
        :'accumulated_dep_account_item_name' => :'accumulated_dep_account_item_name',
        :'items' => :'items',
        :'partners' => :'partners',
        :'available' => :'available',
        :'walletable_id' => :'walletable_id',
        :'group_name' => :'group_name',
        :'corresponding_income_name' => :'corresponding_income_name',
        :'corresponding_income_id' => :'corresponding_income_id',
        :'corresponding_expense_name' => :'corresponding_expense_name',
        :'corresponding_expense_id' => :'corresponding_expense_id'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'name' => :'String',
        :'company_id' => :'Integer',
        :'tax_code' => :'Integer',
        :'account_category_id' => :'Integer',
        :'shortcut' => :'String',
        :'shortcut_num' => :'String',
        :'corresponding_type_expense' => :'Integer',
        :'corresponding_type_income' => :'Integer',
        :'searchable' => :'Integer',
        :'accumulated_dep_account_item_name' => :'String',
        :'items' => :'Array<AccountItemResponseAccountItemItems>',
        :'partners' => :'Array<AccountItemResponseAccountItemPartners>',
        :'available' => :'Boolean',
        :'walletable_id' => :'Integer',
        :'group_name' => :'String',
        :'corresponding_income_name' => :'String',
        :'corresponding_income_id' => :'Integer',
        :'corresponding_expense_name' => :'String',
        :'corresponding_expense_id' => :'Integer'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'walletable_id',
        :'group_name',
        :'corresponding_income_name',
        :'corresponding_income_id',
        :'corresponding_expense_name',
        :'corresponding_expense_id'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `UnofficialFreeeSdk::AccountItemResponseAccountItem` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `UnofficialFreeeSdk::AccountItemResponseAccountItem`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'company_id')
        self.company_id = attributes[:'company_id']
      end

      if attributes.key?(:'tax_code')
        self.tax_code = attributes[:'tax_code']
      end

      if attributes.key?(:'account_category_id')
        self.account_category_id = attributes[:'account_category_id']
      end

      if attributes.key?(:'shortcut')
        self.shortcut = attributes[:'shortcut']
      end

      if attributes.key?(:'shortcut_num')
        self.shortcut_num = attributes[:'shortcut_num']
      end

      if attributes.key?(:'corresponding_type_expense')
        self.corresponding_type_expense = attributes[:'corresponding_type_expense']
      end

      if attributes.key?(:'corresponding_type_income')
        self.corresponding_type_income = attributes[:'corresponding_type_income']
      end

      if attributes.key?(:'searchable')
        self.searchable = attributes[:'searchable']
      end

      if attributes.key?(:'accumulated_dep_account_item_name')
        self.accumulated_dep_account_item_name = attributes[:'accumulated_dep_account_item_name']
      end

      if attributes.key?(:'items')
        if (value = attributes[:'items']).is_a?(Array)
          self.items = value
        end
      end

      if attributes.key?(:'partners')
        if (value = attributes[:'partners']).is_a?(Array)
          self.partners = value
        end
      end

      if attributes.key?(:'available')
        self.available = attributes[:'available']
      end

      if attributes.key?(:'walletable_id')
        self.walletable_id = attributes[:'walletable_id']
      end

      if attributes.key?(:'group_name')
        self.group_name = attributes[:'group_name']
      end

      if attributes.key?(:'corresponding_income_name')
        self.corresponding_income_name = attributes[:'corresponding_income_name']
      end

      if attributes.key?(:'corresponding_income_id')
        self.corresponding_income_id = attributes[:'corresponding_income_id']
      end

      if attributes.key?(:'corresponding_expense_name')
        self.corresponding_expense_name = attributes[:'corresponding_expense_name']
      end

      if attributes.key?(:'corresponding_expense_id')
        self.corresponding_expense_id = attributes[:'corresponding_expense_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @id > 999999999999
        invalid_properties.push('invalid value for "id", must be smaller than or equal to 999999999999.')
      end

      if @id < 1
        invalid_properties.push('invalid value for "id", must be greater than or equal to 1.')
      end

      if @name.nil?
        invalid_properties.push('invalid value for "name", name cannot be nil.')
      end

      if @name.to_s.length > 30
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 30.')
      end

      if @company_id.nil?
        invalid_properties.push('invalid value for "company_id", company_id cannot be nil.')
      end

      if @company_id > 4294967295
        invalid_properties.push('invalid value for "company_id", must be smaller than or equal to 4294967295.')
      end

      if @company_id < 1
        invalid_properties.push('invalid value for "company_id", must be greater than or equal to 1.')
      end

      if @tax_code.nil?
        invalid_properties.push('invalid value for "tax_code", tax_code cannot be nil.')
      end

      if @tax_code > 999999999999
        invalid_properties.push('invalid value for "tax_code", must be smaller than or equal to 999999999999.')
      end

      if @tax_code < 0
        invalid_properties.push('invalid value for "tax_code", must be greater than or equal to 0.')
      end

      if @account_category_id.nil?
        invalid_properties.push('invalid value for "account_category_id", account_category_id cannot be nil.')
      end

      if @account_category_id > 999999999999
        invalid_properties.push('invalid value for "account_category_id", must be smaller than or equal to 999999999999.')
      end

      if @account_category_id < 1
        invalid_properties.push('invalid value for "account_category_id", must be greater than or equal to 1.')
      end

      if !@shortcut.nil? && @shortcut.to_s.length > 20
        invalid_properties.push('invalid value for "shortcut", the character length must be smaller than or equal to 20.')
      end

      if !@shortcut_num.nil? && @shortcut_num.to_s.length > 20
        invalid_properties.push('invalid value for "shortcut_num", the character length must be smaller than or equal to 20.')
      end

      if @corresponding_type_expense.nil?
        invalid_properties.push('invalid value for "corresponding_type_expense", corresponding_type_expense cannot be nil.')
      end

      if @corresponding_type_expense > 999999999999
        invalid_properties.push('invalid value for "corresponding_type_expense", must be smaller than or equal to 999999999999.')
      end

      if @corresponding_type_expense < 1
        invalid_properties.push('invalid value for "corresponding_type_expense", must be greater than or equal to 1.')
      end

      if @corresponding_type_income.nil?
        invalid_properties.push('invalid value for "corresponding_type_income", corresponding_type_income cannot be nil.')
      end

      if @corresponding_type_income > 999999999999
        invalid_properties.push('invalid value for "corresponding_type_income", must be smaller than or equal to 999999999999.')
      end

      if @corresponding_type_income < 1
        invalid_properties.push('invalid value for "corresponding_type_income", must be greater than or equal to 1.')
      end

      if @searchable.nil?
        invalid_properties.push('invalid value for "searchable", searchable cannot be nil.')
      end

      if @searchable > 3
        invalid_properties.push('invalid value for "searchable", must be smaller than or equal to 3.')
      end

      if @searchable < 2
        invalid_properties.push('invalid value for "searchable", must be greater than or equal to 2.')
      end

      if @available.nil?
        invalid_properties.push('invalid value for "available", available cannot be nil.')
      end

      if @walletable_id > 999999999999
        invalid_properties.push('invalid value for "walletable_id", must be smaller than or equal to 999999999999.')
      end

      if @walletable_id < 1
        invalid_properties.push('invalid value for "walletable_id", must be greater than or equal to 1.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @id.nil?
      return false if @id > 999999999999
      return false if @id < 1
      return false if @name.nil?
      return false if @name.to_s.length > 30
      return false if @company_id.nil?
      return false if @company_id > 4294967295
      return false if @company_id < 1
      return false if @tax_code.nil?
      return false if @tax_code > 999999999999
      return false if @tax_code < 0
      return false if @account_category_id.nil?
      return false if @account_category_id > 999999999999
      return false if @account_category_id < 1
      return false if !@shortcut.nil? && @shortcut.to_s.length > 20
      return false if !@shortcut_num.nil? && @shortcut_num.to_s.length > 20
      return false if @corresponding_type_expense.nil?
      return false if @corresponding_type_expense > 999999999999
      return false if @corresponding_type_expense < 1
      return false if @corresponding_type_income.nil?
      return false if @corresponding_type_income > 999999999999
      return false if @corresponding_type_income < 1
      return false if @searchable.nil?
      return false if @searchable > 3
      return false if @searchable < 2
      return false if @available.nil?
      return false if @walletable_id > 999999999999
      return false if @walletable_id < 1
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] id Value to be assigned
    def id=(id)
      if id.nil?
        fail ArgumentError, 'id cannot be nil'
      end

      if id > 999999999999
        fail ArgumentError, 'invalid value for "id", must be smaller than or equal to 999999999999.'
      end

      if id < 1
        fail ArgumentError, 'invalid value for "id", must be greater than or equal to 1.'
      end

      @id = id
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if name.nil?
        fail ArgumentError, 'name cannot be nil'
      end

      if name.to_s.length > 30
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 30.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] company_id Value to be assigned
    def company_id=(company_id)
      if company_id.nil?
        fail ArgumentError, 'company_id cannot be nil'
      end

      if company_id > 4294967295
        fail ArgumentError, 'invalid value for "company_id", must be smaller than or equal to 4294967295.'
      end

      if company_id < 1
        fail ArgumentError, 'invalid value for "company_id", must be greater than or equal to 1.'
      end

      @company_id = company_id
    end

    # Custom attribute writer method with validation
    # @param [Object] tax_code Value to be assigned
    def tax_code=(tax_code)
      if tax_code.nil?
        fail ArgumentError, 'tax_code cannot be nil'
      end

      if tax_code > 999999999999
        fail ArgumentError, 'invalid value for "tax_code", must be smaller than or equal to 999999999999.'
      end

      if tax_code < 0
        fail ArgumentError, 'invalid value for "tax_code", must be greater than or equal to 0.'
      end

      @tax_code = tax_code
    end

    # Custom attribute writer method with validation
    # @param [Object] account_category_id Value to be assigned
    def account_category_id=(account_category_id)
      if account_category_id.nil?
        fail ArgumentError, 'account_category_id cannot be nil'
      end

      if account_category_id > 999999999999
        fail ArgumentError, 'invalid value for "account_category_id", must be smaller than or equal to 999999999999.'
      end

      if account_category_id < 1
        fail ArgumentError, 'invalid value for "account_category_id", must be greater than or equal to 1.'
      end

      @account_category_id = account_category_id
    end

    # Custom attribute writer method with validation
    # @param [Object] shortcut Value to be assigned
    def shortcut=(shortcut)
      if !shortcut.nil? && shortcut.to_s.length > 20
        fail ArgumentError, 'invalid value for "shortcut", the character length must be smaller than or equal to 20.'
      end

      @shortcut = shortcut
    end

    # Custom attribute writer method with validation
    # @param [Object] shortcut_num Value to be assigned
    def shortcut_num=(shortcut_num)
      if !shortcut_num.nil? && shortcut_num.to_s.length > 20
        fail ArgumentError, 'invalid value for "shortcut_num", the character length must be smaller than or equal to 20.'
      end

      @shortcut_num = shortcut_num
    end

    # Custom attribute writer method with validation
    # @param [Object] corresponding_type_expense Value to be assigned
    def corresponding_type_expense=(corresponding_type_expense)
      if corresponding_type_expense.nil?
        fail ArgumentError, 'corresponding_type_expense cannot be nil'
      end

      if corresponding_type_expense > 999999999999
        fail ArgumentError, 'invalid value for "corresponding_type_expense", must be smaller than or equal to 999999999999.'
      end

      if corresponding_type_expense < 1
        fail ArgumentError, 'invalid value for "corresponding_type_expense", must be greater than or equal to 1.'
      end

      @corresponding_type_expense = corresponding_type_expense
    end

    # Custom attribute writer method with validation
    # @param [Object] corresponding_type_income Value to be assigned
    def corresponding_type_income=(corresponding_type_income)
      if corresponding_type_income.nil?
        fail ArgumentError, 'corresponding_type_income cannot be nil'
      end

      if corresponding_type_income > 999999999999
        fail ArgumentError, 'invalid value for "corresponding_type_income", must be smaller than or equal to 999999999999.'
      end

      if corresponding_type_income < 1
        fail ArgumentError, 'invalid value for "corresponding_type_income", must be greater than or equal to 1.'
      end

      @corresponding_type_income = corresponding_type_income
    end

    # Custom attribute writer method with validation
    # @param [Object] searchable Value to be assigned
    def searchable=(searchable)
      if searchable.nil?
        fail ArgumentError, 'searchable cannot be nil'
      end

      if searchable > 3
        fail ArgumentError, 'invalid value for "searchable", must be smaller than or equal to 3.'
      end

      if searchable < 2
        fail ArgumentError, 'invalid value for "searchable", must be greater than or equal to 2.'
      end

      @searchable = searchable
    end

    # Custom attribute writer method with validation
    # @param [Object] walletable_id Value to be assigned
    def walletable_id=(walletable_id)
      if walletable_id > 999999999999
        fail ArgumentError, 'invalid value for "walletable_id", must be smaller than or equal to 999999999999.'
      end

      if walletable_id < 1
        fail ArgumentError, 'invalid value for "walletable_id", must be greater than or equal to 1.'
      end

      @walletable_id = walletable_id
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          name == o.name &&
          company_id == o.company_id &&
          tax_code == o.tax_code &&
          account_category_id == o.account_category_id &&
          shortcut == o.shortcut &&
          shortcut_num == o.shortcut_num &&
          corresponding_type_expense == o.corresponding_type_expense &&
          corresponding_type_income == o.corresponding_type_income &&
          searchable == o.searchable &&
          accumulated_dep_account_item_name == o.accumulated_dep_account_item_name &&
          items == o.items &&
          partners == o.partners &&
          available == o.available &&
          walletable_id == o.walletable_id &&
          group_name == o.group_name &&
          corresponding_income_name == o.corresponding_income_name &&
          corresponding_income_id == o.corresponding_income_id &&
          corresponding_expense_name == o.corresponding_expense_name &&
          corresponding_expense_id == o.corresponding_expense_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, name, company_id, tax_code, account_category_id, shortcut, shortcut_num, corresponding_type_expense, corresponding_type_income, searchable, accumulated_dep_account_item_name, items, partners, available, walletable_id, group_name, corresponding_income_name, corresponding_income_id, corresponding_expense_name, corresponding_expense_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        UnofficialFreeeSdk.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
